// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/logout": {
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Logout",
                "parameters": [
                    {
                        "description": "logoutTokenReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authctrl.logoutTokenReq"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/auth/oauth/apple": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Apple Oauth Login",
                "parameters": [
                    {
                        "description": "oauthLoginReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authctrl.oauthLoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authctrl.loginRes"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/authctrl.loginRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/oauth/google": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Google Oauth Login",
                "parameters": [
                    {
                        "description": "oauthLoginReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authctrl.oauthLoginReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authctrl.loginRes"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/authctrl.loginRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/auth/refresh": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh Token",
                "parameters": [
                    {
                        "description": "refreshTokenReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authctrl.refreshTokenReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authctrl.refreshTokenRes"
                        }
                    }
                }
            }
        },
        "/category": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "[EDGE INCLUDED!]Subject list is included in each category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get Category List",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/categoryctrl.getCategoryListRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Create Category",
                "parameters": [
                    {
                        "description": "createCategoryReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/categoryctrl.createCategoryReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/categoryctrl.createCategoryRes"
                        }
                    }
                }
            }
        },
        "/category/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Delete Category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/group": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Get All Joined Groups",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupctrl.getJoinedGroupsRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Create Group",
                "parameters": [
                    {
                        "description": "createGroupReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groupctrl.createGroupReq"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    }
                }
            }
        },
        "/group/invite/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invite"
                ],
                "summary": "Get Invite Code List",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/group/join": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Join Group with Invite Code",
                "parameters": [
                    {
                        "description": "joinReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groupctrl.joinReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupctrl.joinRes"
                        }
                    }
                }
            }
        },
        "/group/member/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Get All Group Members",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupctrl.getAllGroupMembersRes"
                        }
                    }
                }
            }
        },
        "/group/policy/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Modify Group Policy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "modifyGroupPolicyReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groupctrl.modifyGroupPolicyReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupctrl.modifyGroupPolicyRes"
                        }
                    }
                }
            }
        },
        "/group/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Modify Group Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "modifyGroupInfoReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/groupctrl.modifyGroupInfoReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/groupctrl.modifyGroupInfoRes"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Group"
                ],
                "summary": "Delete Group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/invite/group/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invite"
                ],
                "summary": "Invite to Group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invitectrl.inviteGroupRes"
                        }
                    }
                }
            }
        },
        "/invite/group/{id}/{code}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invite"
                ],
                "summary": "Delete Invite Code",
                "parameters": [
                    {
                        "type": "string",
                        "description": "group id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "invite code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/invite/{code}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invite"
                ],
                "summary": "Get Invite Code Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "invite code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invitectrl.inviteCodeInfoRes"
                        }
                    }
                }
            }
        },
        "/studylog": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudyLog"
                ],
                "summary": "Get All My Study Logs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "count",
                        "name": "count",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/studylogctrl.getStudyLogListRes"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudyLog"
                ],
                "summary": "Create Study Log",
                "parameters": [
                    {
                        "description": "createStudyLogReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/studylogctrl.createStudyLogReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/studylogctrl.createStudyLogRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "403": {
                        "description": "Forbidden"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/studylog/statistics/term": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudyLog"
                ],
                "summary": "Get Statistics with Term",
                "parameters": [
                    {
                        "type": "string",
                        "description": "2006-01-02",
                        "name": "start_date",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "2006-01-03",
                        "name": "end_date",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/studylogctrl.dailyStudyLog"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/studylog/subject/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "StudyLog"
                ],
                "summary": "Get Study Log with Subject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "count",
                        "name": "count",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/studylogctrl.getStudyLogRes"
                        }
                    }
                }
            }
        },
        "/subject": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subject"
                ],
                "summary": "Create Subject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "createSubjectReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subjectctrl.createSubjectReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subjectctrl.createSubjectRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/subject/{id}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Subject"
                ],
                "summary": "Modify Subject Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "modifySubjectInfoRequest",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/subjectctrl.modifySubjectInfoRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/subjectctrl.modifySubjectInfoResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "tags": [
                    "Subject"
                ],
                "summary": "Delete Subject",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Subject ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/timer": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "[EDGE INCLUDED!]Subject info is included in timer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timer"
                ],
                "summary": "Get My Timer Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/timerctrl.TimerInfo"
                        }
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Timer"
                ],
                "summary": "Create Timer",
                "parameters": [
                    {
                        "description": "createTimerReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/timerctrl.createTimerReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/timerctrl.createTimerRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "409": {
                        "description": "Conflict"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get My User Info",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userctrl.myUserInfoRes"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Modify User Info",
                "parameters": [
                    {
                        "description": "modifyUserInfoReq",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userctrl.modifyUserInfoReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userctrl.modifyUserInfoRes"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authctrl.loginRes": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "authctrl.logoutTokenReq": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "authctrl.oauthLoginReq": {
            "type": "object",
            "required": [
                "token"
            ],
            "properties": {
                "token": {
                    "type": "string"
                }
            }
        },
        "authctrl.refreshTokenReq": {
            "type": "object",
            "required": [
                "refresh_token"
            ],
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "authctrl.refreshTokenRes": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "categoryctrl.createCategoryReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "name between 1 and 20"
                }
            }
        },
        "categoryctrl.createCategoryRes": {
            "type": "object",
            "properties": {
                "category": {
                    "$ref": "#/definitions/ent.Category"
                }
            }
        },
        "categoryctrl.getCategoryListRes": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Category"
                    }
                }
            }
        },
        "ent.Affiliation": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the AffiliationQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.AffiliationEdges"
                        }
                    ]
                },
                "group_id": {
                    "description": "GroupID holds the value of the \"group_id\" field.",
                    "type": "string"
                },
                "joined_at": {
                    "description": "JoinedAt holds the value of the \"joined_at\" field.",
                    "type": "string"
                },
                "nickname": {
                    "description": "Nickname holds the value of the \"nickname\" field.",
                    "type": "string"
                },
                "role": {
                    "description": "Role holds the value of the \"role\" field.",
                    "type": "integer"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.AffiliationEdges": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "Group holds the value of the group edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Group"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Category": {
            "type": "object",
            "properties": {
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the CategoryQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.CategoryEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.CategoryEdges": {
            "type": "object",
            "properties": {
                "subjects": {
                    "description": "Subjects holds the value of the subjects edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Subject"
                    }
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Group": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "description": {
                    "description": "Description holds the value of the \"description\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the GroupQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.GroupEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "invite_policy": {
                    "description": "InvitePolicy holds the value of the \"invite_policy\" field.",
                    "type": "integer"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "nickname_policy": {
                    "description": "NicknamePolicy holds the value of the \"nickname_policy\" field.",
                    "type": "string"
                },
                "reveal_policy": {
                    "description": "RevealPolicy holds the value of the \"reveal_policy\" field.",
                    "type": "integer"
                }
            }
        },
        "ent.GroupEdges": {
            "type": "object",
            "properties": {
                "invite_codes": {
                    "description": "InviteCodes holds the value of the invite_codes edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.InviteCode"
                    }
                },
                "members": {
                    "description": "Members holds the value of the members edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.User"
                    }
                },
                "owner": {
                    "description": "Owner holds the value of the owner edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                },
                "shared_study_logs": {
                    "description": "SharedStudyLogs holds the value of the shared_study_logs edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.StudyLog"
                    }
                },
                "shared_timer": {
                    "description": "SharedTimer holds the value of the shared_timer edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Timer"
                    }
                }
            }
        },
        "ent.InviteCode": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Code holds the value of the \"code\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the InviteCodeQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.InviteCodeEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "integer"
                },
                "used": {
                    "description": "Used holds the value of the \"used\" field.",
                    "type": "integer"
                }
            }
        },
        "ent.InviteCodeEdges": {
            "type": "object",
            "properties": {
                "group": {
                    "description": "Group holds the value of the group edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Group"
                        }
                    ]
                }
            }
        },
        "ent.RefreshToken": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the RefreshTokenQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.RefreshTokenEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                }
            }
        },
        "ent.RefreshTokenEdges": {
            "type": "object",
            "properties": {
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.StudyLog": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content holds the value of the \"content\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the StudyLogQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.StudyLogEdges"
                        }
                    ]
                },
                "end_at": {
                    "description": "EndAt holds the value of the \"end_at\" field.",
                    "type": "string"
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "start_at": {
                    "description": "StartAt holds the value of the \"start_at\" field.",
                    "type": "string"
                }
            }
        },
        "ent.StudyLogEdges": {
            "type": "object",
            "properties": {
                "shared_group": {
                    "description": "SharedGroup holds the value of the shared_group edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Group"
                    }
                },
                "subject": {
                    "description": "Subject holds the value of the subject edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Subject"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.Subject": {
            "type": "object",
            "properties": {
                "color": {
                    "description": "Color holds the value of the \"color\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the SubjectQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.SubjectEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                }
            }
        },
        "ent.SubjectEdges": {
            "type": "object",
            "properties": {
                "category": {
                    "description": "Category holds the value of the category edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Category"
                        }
                    ]
                },
                "study_logs": {
                    "description": "StudyLogs holds the value of the study_logs edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.StudyLog"
                    }
                },
                "timers": {
                    "description": "Timers holds the value of the timers edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Timer"
                    }
                }
            }
        },
        "ent.Timer": {
            "type": "object",
            "properties": {
                "content": {
                    "description": "Content holds the value of the \"content\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the TimerQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.TimerEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "start_at": {
                    "description": "StartAt holds the value of the \"start_at\" field.",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID holds the value of the \"user_id\" field.",
                    "type": "string"
                }
            }
        },
        "ent.TimerEdges": {
            "type": "object",
            "properties": {
                "shared_group": {
                    "description": "SharedGroup holds the value of the shared_group edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Group"
                    }
                },
                "subject": {
                    "description": "Subject holds the value of the subject edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Subject"
                        }
                    ]
                },
                "user": {
                    "description": "User holds the value of the user edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.User"
                        }
                    ]
                }
            }
        },
        "ent.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "CreatedAt holds the value of the \"created_at\" field.",
                    "type": "string"
                },
                "edges": {
                    "description": "Edges holds the relations/edges for other nodes in the graph.\nThe values are being populated by the UserQuery when eager-loading is set.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.UserEdges"
                        }
                    ]
                },
                "id": {
                    "description": "ID of the ent.",
                    "type": "string"
                },
                "name": {
                    "description": "Name holds the value of the \"name\" field.",
                    "type": "string"
                },
                "oauth_id": {
                    "description": "OauthID holds the value of the \"oauth_id\" field.",
                    "type": "string"
                },
                "oauth_provider": {
                    "description": "OauthProvider holds the value of the \"oauth_provider\" field.",
                    "type": "integer"
                }
            }
        },
        "ent.UserEdges": {
            "type": "object",
            "properties": {
                "affiliations": {
                    "description": "Affiliations holds the value of the affiliations edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Affiliation"
                    }
                },
                "joined_groups": {
                    "description": "JoinedGroups holds the value of the joined_groups edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Group"
                    }
                },
                "owned_categories": {
                    "description": "OwnedCategories holds the value of the owned_categories edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Category"
                    }
                },
                "owned_groups": {
                    "description": "OwnedGroups holds the value of the owned_groups edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Group"
                    }
                },
                "refresh_tokens": {
                    "description": "RefreshTokens holds the value of the refresh_tokens edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.RefreshToken"
                    }
                },
                "study_logs": {
                    "description": "StudyLogs holds the value of the study_logs edge.",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.StudyLog"
                    }
                },
                "timers": {
                    "description": "Timers holds the value of the timers edge.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ent.Timer"
                        }
                    ]
                }
            }
        },
        "groupctrl.createGroupReq": {
            "type": "object",
            "required": [
                "invite_policy",
                "name",
                "nickname",
                "reveal_policy"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "description between 0 and 100"
                },
                "invite_policy": {
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                },
                "name": {
                    "type": "string",
                    "example": "name between 3 and 30"
                },
                "nickname": {
                    "type": "string",
                    "example": "nickname between 1 and 20"
                },
                "nickname_policy": {
                    "type": "string",
                    "example": "nickname_policy between 0 and 50"
                },
                "reveal_policy": {
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                }
            }
        },
        "groupctrl.getAllGroupMembersRes": {
            "type": "object",
            "properties": {
                "members": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Affiliation"
                    }
                }
            }
        },
        "groupctrl.getJoinedGroupsRes": {
            "type": "object",
            "properties": {
                "joined_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.Group"
                    }
                }
            }
        },
        "groupctrl.joinReq": {
            "type": "object",
            "required": [
                "invite_code"
            ],
            "properties": {
                "invite_code": {
                    "type": "string"
                }
            }
        },
        "groupctrl.joinRes": {
            "type": "object",
            "properties": {
                "group": {
                    "$ref": "#/definitions/ent.Group"
                }
            }
        },
        "groupctrl.modifyGroupInfoReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "description between 0 and 100"
                },
                "name": {
                    "type": "string",
                    "example": "name between 3 and 30"
                }
            }
        },
        "groupctrl.modifyGroupInfoRes": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "groupctrl.modifyGroupPolicyReq": {
            "type": "object",
            "required": [
                "invite_policy",
                "reveal_policy"
            ],
            "properties": {
                "invite_policy": {
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                },
                "reveal_policy": {
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                }
            }
        },
        "groupctrl.modifyGroupPolicyRes": {
            "type": "object",
            "required": [
                "invite_policy",
                "reveal_policy"
            ],
            "properties": {
                "invite_policy": {
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                },
                "reveal_policy": {
                    "type": "integer",
                    "maximum": 2,
                    "minimum": 0
                }
            }
        },
        "invitectrl.inviteCodeInfoRes": {
            "type": "object",
            "properties": {
                "group_description": {
                    "type": "string"
                },
                "group_name": {
                    "type": "string"
                },
                "group_owner_nickname": {
                    "type": "string"
                }
            }
        },
        "invitectrl.inviteGroupRes": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "studylogctrl.createStudyLogReq": {
            "type": "object",
            "required": [
                "content",
                "end_at",
                "groups_to_share",
                "start_at",
                "subject_id"
            ],
            "properties": {
                "content": {
                    "type": "string",
                    "example": "content between 0 and 30"
                },
                "end_at": {
                    "type": "string",
                    "example": "2020-08-28T09:20:26.187+09:00"
                },
                "groups_to_share": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "group_id"
                    ]
                },
                "start_at": {
                    "type": "string",
                    "example": "2020-08-28T09:20:26.187+09:00"
                },
                "subject_id": {
                    "type": "string",
                    "example": "subject_id"
                }
            }
        },
        "studylogctrl.createStudyLogRes": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "end_at": {
                    "type": "string"
                },
                "groups_to_share": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "studylogctrl.dailyStudyLog": {
            "type": "object",
            "properties": {
                "date": {
                    "type": "string"
                },
                "log": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/studylogctrl.dailySubjectLog"
                    }
                }
            }
        },
        "studylogctrl.dailySubjectLog": {
            "type": "object",
            "properties": {
                "study_time": {
                    "type": "integer"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "studylogctrl.getStudyLogListRes": {
            "type": "object",
            "properties": {
                "studyLogs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.StudyLog"
                    }
                }
            }
        },
        "studylogctrl.getStudyLogRes": {
            "type": "object",
            "properties": {
                "study_logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ent.StudyLog"
                    }
                }
            }
        },
        "subjectctrl.createSubjectReq": {
            "type": "object",
            "required": [
                "color",
                "name"
            ],
            "properties": {
                "color": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "name between 1 and 20"
                }
            }
        },
        "subjectctrl.createSubjectRes": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "subjectctrl.modifySubjectInfoRequest": {
            "type": "object",
            "required": [
                "color",
                "name"
            ],
            "properties": {
                "color": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "example": "name between 1 and 20"
                }
            }
        },
        "subjectctrl.modifySubjectInfoResponse": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "timerctrl.TimerInfo": {
            "type": "object",
            "properties": {
                "timer": {
                    "$ref": "#/definitions/ent.Timer"
                }
            }
        },
        "timerctrl.createTimerReq": {
            "type": "object",
            "required": [
                "content",
                "subject_id"
            ],
            "properties": {
                "content": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "timerctrl.createTimerRes": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "start_at": {
                    "type": "string"
                },
                "subject_id": {
                    "type": "string"
                }
            }
        },
        "userctrl.modifyUserInfoReq": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "name between 1 and 20"
                }
            }
        },
        "userctrl.modifyUserInfoRes": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "userctrl.myUserInfoRes": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:3000",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Distimer Swagger API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

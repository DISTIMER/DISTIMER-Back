// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/fcmtoken"
	"pentag.kr/distimer/ent/session"
)

// FCMTokenCreate is the builder for creating a FCMToken entity.
type FCMTokenCreate struct {
	config
	mutation *FCMTokenMutation
	hooks    []Hook
}

// SetPushToken sets the "push_token" field.
func (ftc *FCMTokenCreate) SetPushToken(s string) *FCMTokenCreate {
	ftc.mutation.SetPushToken(s)
	return ftc
}

// SetSessionID sets the "session" edge to the Session entity by ID.
func (ftc *FCMTokenCreate) SetSessionID(id uuid.UUID) *FCMTokenCreate {
	ftc.mutation.SetSessionID(id)
	return ftc
}

// SetSession sets the "session" edge to the Session entity.
func (ftc *FCMTokenCreate) SetSession(s *Session) *FCMTokenCreate {
	return ftc.SetSessionID(s.ID)
}

// Mutation returns the FCMTokenMutation object of the builder.
func (ftc *FCMTokenCreate) Mutation() *FCMTokenMutation {
	return ftc.mutation
}

// Save creates the FCMToken in the database.
func (ftc *FCMTokenCreate) Save(ctx context.Context) (*FCMToken, error) {
	return withHooks(ctx, ftc.sqlSave, ftc.mutation, ftc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ftc *FCMTokenCreate) SaveX(ctx context.Context) *FCMToken {
	v, err := ftc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftc *FCMTokenCreate) Exec(ctx context.Context) error {
	_, err := ftc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftc *FCMTokenCreate) ExecX(ctx context.Context) {
	if err := ftc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ftc *FCMTokenCreate) check() error {
	if _, ok := ftc.mutation.PushToken(); !ok {
		return &ValidationError{Name: "push_token", err: errors.New(`ent: missing required field "FCMToken.push_token"`)}
	}
	if _, ok := ftc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required edge "FCMToken.session"`)}
	}
	return nil
}

func (ftc *FCMTokenCreate) sqlSave(ctx context.Context) (*FCMToken, error) {
	if err := ftc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ftc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ftc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ftc.mutation.id = &_node.ID
	ftc.mutation.done = true
	return _node, nil
}

func (ftc *FCMTokenCreate) createSpec() (*FCMToken, *sqlgraph.CreateSpec) {
	var (
		_node = &FCMToken{config: ftc.config}
		_spec = sqlgraph.NewCreateSpec(fcmtoken.Table, sqlgraph.NewFieldSpec(fcmtoken.FieldID, field.TypeInt))
	)
	if value, ok := ftc.mutation.PushToken(); ok {
		_spec.SetField(fcmtoken.FieldPushToken, field.TypeString, value)
		_node.PushToken = value
	}
	if nodes := ftc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   fcmtoken.SessionTable,
			Columns: []string{fcmtoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.session_fcm_token = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FCMTokenCreateBulk is the builder for creating many FCMToken entities in bulk.
type FCMTokenCreateBulk struct {
	config
	err      error
	builders []*FCMTokenCreate
}

// Save creates the FCMToken entities in the database.
func (ftcb *FCMTokenCreateBulk) Save(ctx context.Context) ([]*FCMToken, error) {
	if ftcb.err != nil {
		return nil, ftcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ftcb.builders))
	nodes := make([]*FCMToken, len(ftcb.builders))
	mutators := make([]Mutator, len(ftcb.builders))
	for i := range ftcb.builders {
		func(i int, root context.Context) {
			builder := ftcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FCMTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ftcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ftcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ftcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ftcb *FCMTokenCreateBulk) SaveX(ctx context.Context) []*FCMToken {
	v, err := ftcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ftcb *FCMTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := ftcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ftcb *FCMTokenCreateBulk) ExecX(ctx context.Context) {
	if err := ftcb.Exec(ctx); err != nil {
		panic(err)
	}
}

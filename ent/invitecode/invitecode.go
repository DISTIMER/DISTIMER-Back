// Code generated by ent, DO NOT EDIT.

package invitecode

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the invitecode type in the database.
	Label = "invite_code"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldUsed holds the string denoting the used field in the database.
	FieldUsed = "used"
	// EdgeGroup holds the string denoting the group edge name in mutations.
	EdgeGroup = "group"
	// Table holds the table name of the invitecode in the database.
	Table = "invite_codes"
	// GroupTable is the table that holds the group relation/edge.
	GroupTable = "invite_codes"
	// GroupInverseTable is the table name for the Group entity.
	// It exists in this package in order to avoid circular dependency with the "group" package.
	GroupInverseTable = "groups"
	// GroupColumn is the table column denoting the group relation/edge.
	GroupColumn = "group_invite_codes"
)

// Columns holds all SQL columns for invitecode fields.
var Columns = []string{
	FieldID,
	FieldCode,
	FieldUsed,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "invite_codes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"group_invite_codes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUsed holds the default value on creation for the "used" field.
	DefaultUsed int
)

// OrderOption defines the ordering options for the InviteCode queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByUsed orders the results by the used field.
func ByUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsed, opts...).ToFunc()
}

// ByGroupField orders the results by group field.
func ByGroupField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGroupStep(), sql.OrderByField(field, opts...))
	}
}
func newGroupStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GroupInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GroupTable, GroupColumn),
	)
}

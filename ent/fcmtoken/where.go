// Code generated by ent, DO NOT EDIT.

package fcmtoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"pentag.kr/distimer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldLTE(FieldID, id))
}

// PushToken applies equality check predicate on the "push_token" field. It's identical to PushTokenEQ.
func PushToken(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldEQ(FieldPushToken, v))
}

// PushTokenEQ applies the EQ predicate on the "push_token" field.
func PushTokenEQ(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldEQ(FieldPushToken, v))
}

// PushTokenNEQ applies the NEQ predicate on the "push_token" field.
func PushTokenNEQ(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldNEQ(FieldPushToken, v))
}

// PushTokenIn applies the In predicate on the "push_token" field.
func PushTokenIn(vs ...string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldIn(FieldPushToken, vs...))
}

// PushTokenNotIn applies the NotIn predicate on the "push_token" field.
func PushTokenNotIn(vs ...string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldNotIn(FieldPushToken, vs...))
}

// PushTokenGT applies the GT predicate on the "push_token" field.
func PushTokenGT(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldGT(FieldPushToken, v))
}

// PushTokenGTE applies the GTE predicate on the "push_token" field.
func PushTokenGTE(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldGTE(FieldPushToken, v))
}

// PushTokenLT applies the LT predicate on the "push_token" field.
func PushTokenLT(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldLT(FieldPushToken, v))
}

// PushTokenLTE applies the LTE predicate on the "push_token" field.
func PushTokenLTE(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldLTE(FieldPushToken, v))
}

// PushTokenContains applies the Contains predicate on the "push_token" field.
func PushTokenContains(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldContains(FieldPushToken, v))
}

// PushTokenHasPrefix applies the HasPrefix predicate on the "push_token" field.
func PushTokenHasPrefix(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldHasPrefix(FieldPushToken, v))
}

// PushTokenHasSuffix applies the HasSuffix predicate on the "push_token" field.
func PushTokenHasSuffix(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldHasSuffix(FieldPushToken, v))
}

// PushTokenEqualFold applies the EqualFold predicate on the "push_token" field.
func PushTokenEqualFold(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldEqualFold(FieldPushToken, v))
}

// PushTokenContainsFold applies the ContainsFold predicate on the "push_token" field.
func PushTokenContainsFold(v string) predicate.FCMToken {
	return predicate.FCMToken(sql.FieldContainsFold(FieldPushToken, v))
}

// HasSession applies the HasEdge predicate on the "session" edge.
func HasSession() predicate.FCMToken {
	return predicate.FCMToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SessionTable, SessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionWith applies the HasEdge predicate on the "session" edge with a given conditions (other predicates).
func HasSessionWith(preds ...predicate.Session) predicate.FCMToken {
	return predicate.FCMToken(func(s *sql.Selector) {
		step := newSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FCMToken) predicate.FCMToken {
	return predicate.FCMToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FCMToken) predicate.FCMToken {
	return predicate.FCMToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FCMToken) predicate.FCMToken {
	return predicate.FCMToken(sql.NotPredicates(p))
}

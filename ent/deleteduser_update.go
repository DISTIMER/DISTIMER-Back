// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"pentag.kr/distimer/ent/deleteduser"
	"pentag.kr/distimer/ent/predicate"
)

// DeletedUserUpdate is the builder for updating DeletedUser entities.
type DeletedUserUpdate struct {
	config
	hooks    []Hook
	mutation *DeletedUserMutation
}

// Where appends a list predicates to the DeletedUserUpdate builder.
func (duu *DeletedUserUpdate) Where(ps ...predicate.DeletedUser) *DeletedUserUpdate {
	duu.mutation.Where(ps...)
	return duu
}

// SetName sets the "name" field.
func (duu *DeletedUserUpdate) SetName(s string) *DeletedUserUpdate {
	duu.mutation.SetName(s)
	return duu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duu *DeletedUserUpdate) SetNillableName(s *string) *DeletedUserUpdate {
	if s != nil {
		duu.SetName(*s)
	}
	return duu
}

// SetOauthID sets the "oauth_id" field.
func (duu *DeletedUserUpdate) SetOauthID(s string) *DeletedUserUpdate {
	duu.mutation.SetOauthID(s)
	return duu
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (duu *DeletedUserUpdate) SetNillableOauthID(s *string) *DeletedUserUpdate {
	if s != nil {
		duu.SetOauthID(*s)
	}
	return duu
}

// SetOauthProvider sets the "oauth_provider" field.
func (duu *DeletedUserUpdate) SetOauthProvider(i int8) *DeletedUserUpdate {
	duu.mutation.ResetOauthProvider()
	duu.mutation.SetOauthProvider(i)
	return duu
}

// SetNillableOauthProvider sets the "oauth_provider" field if the given value is not nil.
func (duu *DeletedUserUpdate) SetNillableOauthProvider(i *int8) *DeletedUserUpdate {
	if i != nil {
		duu.SetOauthProvider(*i)
	}
	return duu
}

// AddOauthProvider adds i to the "oauth_provider" field.
func (duu *DeletedUserUpdate) AddOauthProvider(i int8) *DeletedUserUpdate {
	duu.mutation.AddOauthProvider(i)
	return duu
}

// Mutation returns the DeletedUserMutation object of the builder.
func (duu *DeletedUserUpdate) Mutation() *DeletedUserMutation {
	return duu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (duu *DeletedUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, duu.sqlSave, duu.mutation, duu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duu *DeletedUserUpdate) SaveX(ctx context.Context) int {
	affected, err := duu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (duu *DeletedUserUpdate) Exec(ctx context.Context) error {
	_, err := duu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duu *DeletedUserUpdate) ExecX(ctx context.Context) {
	if err := duu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duu *DeletedUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deleteduser.Table, deleteduser.Columns, sqlgraph.NewFieldSpec(deleteduser.FieldID, field.TypeUUID))
	if ps := duu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duu.mutation.Name(); ok {
		_spec.SetField(deleteduser.FieldName, field.TypeString, value)
	}
	if value, ok := duu.mutation.OauthID(); ok {
		_spec.SetField(deleteduser.FieldOauthID, field.TypeString, value)
	}
	if value, ok := duu.mutation.OauthProvider(); ok {
		_spec.SetField(deleteduser.FieldOauthProvider, field.TypeInt8, value)
	}
	if value, ok := duu.mutation.AddedOauthProvider(); ok {
		_spec.AddField(deleteduser.FieldOauthProvider, field.TypeInt8, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, duu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deleteduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	duu.mutation.done = true
	return n, nil
}

// DeletedUserUpdateOne is the builder for updating a single DeletedUser entity.
type DeletedUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeletedUserMutation
}

// SetName sets the "name" field.
func (duuo *DeletedUserUpdateOne) SetName(s string) *DeletedUserUpdateOne {
	duuo.mutation.SetName(s)
	return duuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (duuo *DeletedUserUpdateOne) SetNillableName(s *string) *DeletedUserUpdateOne {
	if s != nil {
		duuo.SetName(*s)
	}
	return duuo
}

// SetOauthID sets the "oauth_id" field.
func (duuo *DeletedUserUpdateOne) SetOauthID(s string) *DeletedUserUpdateOne {
	duuo.mutation.SetOauthID(s)
	return duuo
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (duuo *DeletedUserUpdateOne) SetNillableOauthID(s *string) *DeletedUserUpdateOne {
	if s != nil {
		duuo.SetOauthID(*s)
	}
	return duuo
}

// SetOauthProvider sets the "oauth_provider" field.
func (duuo *DeletedUserUpdateOne) SetOauthProvider(i int8) *DeletedUserUpdateOne {
	duuo.mutation.ResetOauthProvider()
	duuo.mutation.SetOauthProvider(i)
	return duuo
}

// SetNillableOauthProvider sets the "oauth_provider" field if the given value is not nil.
func (duuo *DeletedUserUpdateOne) SetNillableOauthProvider(i *int8) *DeletedUserUpdateOne {
	if i != nil {
		duuo.SetOauthProvider(*i)
	}
	return duuo
}

// AddOauthProvider adds i to the "oauth_provider" field.
func (duuo *DeletedUserUpdateOne) AddOauthProvider(i int8) *DeletedUserUpdateOne {
	duuo.mutation.AddOauthProvider(i)
	return duuo
}

// Mutation returns the DeletedUserMutation object of the builder.
func (duuo *DeletedUserUpdateOne) Mutation() *DeletedUserMutation {
	return duuo.mutation
}

// Where appends a list predicates to the DeletedUserUpdate builder.
func (duuo *DeletedUserUpdateOne) Where(ps ...predicate.DeletedUser) *DeletedUserUpdateOne {
	duuo.mutation.Where(ps...)
	return duuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duuo *DeletedUserUpdateOne) Select(field string, fields ...string) *DeletedUserUpdateOne {
	duuo.fields = append([]string{field}, fields...)
	return duuo
}

// Save executes the query and returns the updated DeletedUser entity.
func (duuo *DeletedUserUpdateOne) Save(ctx context.Context) (*DeletedUser, error) {
	return withHooks(ctx, duuo.sqlSave, duuo.mutation, duuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duuo *DeletedUserUpdateOne) SaveX(ctx context.Context) *DeletedUser {
	node, err := duuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duuo *DeletedUserUpdateOne) Exec(ctx context.Context) error {
	_, err := duuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duuo *DeletedUserUpdateOne) ExecX(ctx context.Context) {
	if err := duuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duuo *DeletedUserUpdateOne) sqlSave(ctx context.Context) (_node *DeletedUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(deleteduser.Table, deleteduser.Columns, sqlgraph.NewFieldSpec(deleteduser.FieldID, field.TypeUUID))
	id, ok := duuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeletedUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deleteduser.FieldID)
		for _, f := range fields {
			if !deleteduser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deleteduser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duuo.mutation.Name(); ok {
		_spec.SetField(deleteduser.FieldName, field.TypeString, value)
	}
	if value, ok := duuo.mutation.OauthID(); ok {
		_spec.SetField(deleteduser.FieldOauthID, field.TypeString, value)
	}
	if value, ok := duuo.mutation.OauthProvider(); ok {
		_spec.SetField(deleteduser.FieldOauthProvider, field.TypeInt8, value)
	}
	if value, ok := duuo.mutation.AddedOauthProvider(); ok {
		_spec.AddField(deleteduser.FieldOauthProvider, field.TypeInt8, value)
	}
	_node = &DeletedUser{config: duuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deleteduser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duuo.mutation.done = true
	return _node, nil
}

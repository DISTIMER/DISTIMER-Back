// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OauthID holds the value of the "oauth_id" field.
	OauthID string `json:"oauth_id,omitempty"`
	// OauthProvider holds the value of the "oauth_provider" field.
	OauthProvider int8 `json:"oauth_provider,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// JoinedGroups holds the value of the joined_groups edge.
	JoinedGroups []*Group `json:"joined_groups,omitempty"`
	// OwnedGroups holds the value of the owned_groups edge.
	OwnedGroups []*Group `json:"owned_groups,omitempty"`
	// StudyLogs holds the value of the study_logs edge.
	StudyLogs []*StudyLog `json:"study_logs,omitempty"`
	// RefreshTokens holds the value of the refresh_tokens edge.
	RefreshTokens []*RefreshToken `json:"refresh_tokens,omitempty"`
	// OwnedCategories holds the value of the owned_categories edge.
	OwnedCategories []*Category `json:"owned_categories,omitempty"`
	// Affiliations holds the value of the affiliations edge.
	Affiliations []*Affiliation `json:"affiliations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [6]bool
}

// JoinedGroupsOrErr returns the JoinedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) JoinedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[0] {
		return e.JoinedGroups, nil
	}
	return nil, &NotLoadedError{edge: "joined_groups"}
}

// OwnedGroupsOrErr returns the OwnedGroups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedGroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[1] {
		return e.OwnedGroups, nil
	}
	return nil, &NotLoadedError{edge: "owned_groups"}
}

// StudyLogsOrErr returns the StudyLogs value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) StudyLogsOrErr() ([]*StudyLog, error) {
	if e.loadedTypes[2] {
		return e.StudyLogs, nil
	}
	return nil, &NotLoadedError{edge: "study_logs"}
}

// RefreshTokensOrErr returns the RefreshTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RefreshTokensOrErr() ([]*RefreshToken, error) {
	if e.loadedTypes[3] {
		return e.RefreshTokens, nil
	}
	return nil, &NotLoadedError{edge: "refresh_tokens"}
}

// OwnedCategoriesOrErr returns the OwnedCategories value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedCategoriesOrErr() ([]*Category, error) {
	if e.loadedTypes[4] {
		return e.OwnedCategories, nil
	}
	return nil, &NotLoadedError{edge: "owned_categories"}
}

// AffiliationsOrErr returns the Affiliations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) AffiliationsOrErr() ([]*Affiliation, error) {
	if e.loadedTypes[5] {
		return e.Affiliations, nil
	}
	return nil, &NotLoadedError{edge: "affiliations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldOauthProvider:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldOauthID:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case user.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				u.ID = *value
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldOauthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_id", values[i])
			} else if value.Valid {
				u.OauthID = value.String
			}
		case user.FieldOauthProvider:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_provider", values[i])
			} else if value.Valid {
				u.OauthProvider = int8(value.Int64)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryJoinedGroups queries the "joined_groups" edge of the User entity.
func (u *User) QueryJoinedGroups() *GroupQuery {
	return NewUserClient(u.config).QueryJoinedGroups(u)
}

// QueryOwnedGroups queries the "owned_groups" edge of the User entity.
func (u *User) QueryOwnedGroups() *GroupQuery {
	return NewUserClient(u.config).QueryOwnedGroups(u)
}

// QueryStudyLogs queries the "study_logs" edge of the User entity.
func (u *User) QueryStudyLogs() *StudyLogQuery {
	return NewUserClient(u.config).QueryStudyLogs(u)
}

// QueryRefreshTokens queries the "refresh_tokens" edge of the User entity.
func (u *User) QueryRefreshTokens() *RefreshTokenQuery {
	return NewUserClient(u.config).QueryRefreshTokens(u)
}

// QueryOwnedCategories queries the "owned_categories" edge of the User entity.
func (u *User) QueryOwnedCategories() *CategoryQuery {
	return NewUserClient(u.config).QueryOwnedCategories(u)
}

// QueryAffiliations queries the "affiliations" edge of the User entity.
func (u *User) QueryAffiliations() *AffiliationQuery {
	return NewUserClient(u.config).QueryAffiliations(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("oauth_id=")
	builder.WriteString(u.OauthID)
	builder.WriteString(", ")
	builder.WriteString("oauth_provider=")
	builder.WriteString(fmt.Sprintf("%v", u.OauthProvider))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/category"
	"pentag.kr/distimer/ent/studylog"
	"pentag.kr/distimer/ent/user"
)

// StudyLog is the model entity for the StudyLog schema.
type StudyLog struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// StartAt holds the value of the "start_at" field.
	StartAt time.Time `json:"start_at,omitempty"`
	// EndAt holds the value of the "end_at" field.
	EndAt time.Time `json:"end_at,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StudyLogQuery when eager-loading is set.
	Edges               StudyLogEdges `json:"edges"`
	category_study_logs *uuid.UUID
	user_study_logs     *uuid.UUID
	selectValues        sql.SelectValues
}

// StudyLogEdges holds the relations/edges for other nodes in the graph.
type StudyLogEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Category holds the value of the category edge.
	Category *Category `json:"category,omitempty"`
	// SharedGroup holds the value of the shared_group edge.
	SharedGroup []*Group `json:"shared_group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudyLogEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StudyLogEdges) CategoryOrErr() (*Category, error) {
	if e.Category != nil {
		return e.Category, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: category.Label}
	}
	return nil, &NotLoadedError{edge: "category"}
}

// SharedGroupOrErr returns the SharedGroup value or an error if the edge
// was not loaded in eager-loading.
func (e StudyLogEdges) SharedGroupOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.SharedGroup, nil
	}
	return nil, &NotLoadedError{edge: "shared_group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StudyLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case studylog.FieldContent:
			values[i] = new(sql.NullString)
		case studylog.FieldStartAt, studylog.FieldEndAt:
			values[i] = new(sql.NullTime)
		case studylog.FieldID:
			values[i] = new(uuid.UUID)
		case studylog.ForeignKeys[0]: // category_study_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case studylog.ForeignKeys[1]: // user_study_logs
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StudyLog fields.
func (sl *StudyLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case studylog.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				sl.ID = *value
			}
		case studylog.FieldStartAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_at", values[i])
			} else if value.Valid {
				sl.StartAt = value.Time
			}
		case studylog.FieldEndAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_at", values[i])
			} else if value.Valid {
				sl.EndAt = value.Time
			}
		case studylog.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				sl.Content = value.String
			}
		case studylog.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field category_study_logs", values[i])
			} else if value.Valid {
				sl.category_study_logs = new(uuid.UUID)
				*sl.category_study_logs = *value.S.(*uuid.UUID)
			}
		case studylog.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_study_logs", values[i])
			} else if value.Valid {
				sl.user_study_logs = new(uuid.UUID)
				*sl.user_study_logs = *value.S.(*uuid.UUID)
			}
		default:
			sl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the StudyLog.
// This includes values selected through modifiers, order, etc.
func (sl *StudyLog) Value(name string) (ent.Value, error) {
	return sl.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the StudyLog entity.
func (sl *StudyLog) QueryUser() *UserQuery {
	return NewStudyLogClient(sl.config).QueryUser(sl)
}

// QueryCategory queries the "category" edge of the StudyLog entity.
func (sl *StudyLog) QueryCategory() *CategoryQuery {
	return NewStudyLogClient(sl.config).QueryCategory(sl)
}

// QuerySharedGroup queries the "shared_group" edge of the StudyLog entity.
func (sl *StudyLog) QuerySharedGroup() *GroupQuery {
	return NewStudyLogClient(sl.config).QuerySharedGroup(sl)
}

// Update returns a builder for updating this StudyLog.
// Note that you need to call StudyLog.Unwrap() before calling this method if this StudyLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (sl *StudyLog) Update() *StudyLogUpdateOne {
	return NewStudyLogClient(sl.config).UpdateOne(sl)
}

// Unwrap unwraps the StudyLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sl *StudyLog) Unwrap() *StudyLog {
	_tx, ok := sl.config.driver.(*txDriver)
	if !ok {
		panic("ent: StudyLog is not a transactional entity")
	}
	sl.config.driver = _tx.drv
	return sl
}

// String implements the fmt.Stringer.
func (sl *StudyLog) String() string {
	var builder strings.Builder
	builder.WriteString("StudyLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sl.ID))
	builder.WriteString("start_at=")
	builder.WriteString(sl.StartAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_at=")
	builder.WriteString(sl.EndAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(sl.Content)
	builder.WriteByte(')')
	return builder.String()
}

// StudyLogs is a parsable slice of StudyLog.
type StudyLogs []*StudyLog

// Code generated by ent, DO NOT EDIT.

package apnstoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"pentag.kr/distimer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldLTE(FieldID, id))
}

// StartToken applies equality check predicate on the "start_token" field. It's identical to StartTokenEQ.
func StartToken(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEQ(FieldStartToken, v))
}

// UpdateToken applies equality check predicate on the "update_token" field. It's identical to UpdateTokenEQ.
func UpdateToken(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEQ(FieldUpdateToken, v))
}

// StartTokenEQ applies the EQ predicate on the "start_token" field.
func StartTokenEQ(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEQ(FieldStartToken, v))
}

// StartTokenNEQ applies the NEQ predicate on the "start_token" field.
func StartTokenNEQ(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldNEQ(FieldStartToken, v))
}

// StartTokenIn applies the In predicate on the "start_token" field.
func StartTokenIn(vs ...string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldIn(FieldStartToken, vs...))
}

// StartTokenNotIn applies the NotIn predicate on the "start_token" field.
func StartTokenNotIn(vs ...string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldNotIn(FieldStartToken, vs...))
}

// StartTokenGT applies the GT predicate on the "start_token" field.
func StartTokenGT(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldGT(FieldStartToken, v))
}

// StartTokenGTE applies the GTE predicate on the "start_token" field.
func StartTokenGTE(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldGTE(FieldStartToken, v))
}

// StartTokenLT applies the LT predicate on the "start_token" field.
func StartTokenLT(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldLT(FieldStartToken, v))
}

// StartTokenLTE applies the LTE predicate on the "start_token" field.
func StartTokenLTE(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldLTE(FieldStartToken, v))
}

// StartTokenContains applies the Contains predicate on the "start_token" field.
func StartTokenContains(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldContains(FieldStartToken, v))
}

// StartTokenHasPrefix applies the HasPrefix predicate on the "start_token" field.
func StartTokenHasPrefix(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldHasPrefix(FieldStartToken, v))
}

// StartTokenHasSuffix applies the HasSuffix predicate on the "start_token" field.
func StartTokenHasSuffix(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldHasSuffix(FieldStartToken, v))
}

// StartTokenEqualFold applies the EqualFold predicate on the "start_token" field.
func StartTokenEqualFold(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEqualFold(FieldStartToken, v))
}

// StartTokenContainsFold applies the ContainsFold predicate on the "start_token" field.
func StartTokenContainsFold(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldContainsFold(FieldStartToken, v))
}

// UpdateTokenEQ applies the EQ predicate on the "update_token" field.
func UpdateTokenEQ(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEQ(FieldUpdateToken, v))
}

// UpdateTokenNEQ applies the NEQ predicate on the "update_token" field.
func UpdateTokenNEQ(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldNEQ(FieldUpdateToken, v))
}

// UpdateTokenIn applies the In predicate on the "update_token" field.
func UpdateTokenIn(vs ...string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldIn(FieldUpdateToken, vs...))
}

// UpdateTokenNotIn applies the NotIn predicate on the "update_token" field.
func UpdateTokenNotIn(vs ...string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldNotIn(FieldUpdateToken, vs...))
}

// UpdateTokenGT applies the GT predicate on the "update_token" field.
func UpdateTokenGT(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldGT(FieldUpdateToken, v))
}

// UpdateTokenGTE applies the GTE predicate on the "update_token" field.
func UpdateTokenGTE(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldGTE(FieldUpdateToken, v))
}

// UpdateTokenLT applies the LT predicate on the "update_token" field.
func UpdateTokenLT(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldLT(FieldUpdateToken, v))
}

// UpdateTokenLTE applies the LTE predicate on the "update_token" field.
func UpdateTokenLTE(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldLTE(FieldUpdateToken, v))
}

// UpdateTokenContains applies the Contains predicate on the "update_token" field.
func UpdateTokenContains(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldContains(FieldUpdateToken, v))
}

// UpdateTokenHasPrefix applies the HasPrefix predicate on the "update_token" field.
func UpdateTokenHasPrefix(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldHasPrefix(FieldUpdateToken, v))
}

// UpdateTokenHasSuffix applies the HasSuffix predicate on the "update_token" field.
func UpdateTokenHasSuffix(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldHasSuffix(FieldUpdateToken, v))
}

// UpdateTokenEqualFold applies the EqualFold predicate on the "update_token" field.
func UpdateTokenEqualFold(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldEqualFold(FieldUpdateToken, v))
}

// UpdateTokenContainsFold applies the ContainsFold predicate on the "update_token" field.
func UpdateTokenContainsFold(v string) predicate.APNsToken {
	return predicate.APNsToken(sql.FieldContainsFold(FieldUpdateToken, v))
}

// HasSession applies the HasEdge predicate on the "session" edge.
func HasSession() predicate.APNsToken {
	return predicate.APNsToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, SessionTable, SessionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSessionWith applies the HasEdge predicate on the "session" edge with a given conditions (other predicates).
func HasSessionWith(preds ...predicate.Session) predicate.APNsToken {
	return predicate.APNsToken(func(s *sql.Selector) {
		step := newSessionStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.APNsToken) predicate.APNsToken {
	return predicate.APNsToken(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.APNsToken) predicate.APNsToken {
	return predicate.APNsToken(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.APNsToken) predicate.APNsToken {
	return predicate.APNsToken(sql.NotPredicates(p))
}

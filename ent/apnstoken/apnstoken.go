// Code generated by ent, DO NOT EDIT.

package apnstoken

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the apnstoken type in the database.
	Label = "ap_ns_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStartToken holds the string denoting the start_token field in the database.
	FieldStartToken = "start_token"
	// FieldUpdateToken holds the string denoting the update_token field in the database.
	FieldUpdateToken = "update_token"
	// EdgeSession holds the string denoting the session edge name in mutations.
	EdgeSession = "session"
	// Table holds the table name of the apnstoken in the database.
	Table = "ap_ns_tokens"
	// SessionTable is the table that holds the session relation/edge.
	SessionTable = "ap_ns_tokens"
	// SessionInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionInverseTable = "sessions"
	// SessionColumn is the table column denoting the session relation/edge.
	SessionColumn = "session_apns_token"
)

// Columns holds all SQL columns for apnstoken fields.
var Columns = []string{
	FieldID,
	FieldStartToken,
	FieldUpdateToken,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "ap_ns_tokens"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"session_apns_token",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the APNsToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStartToken orders the results by the start_token field.
func ByStartToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartToken, opts...).ToFunc()
}

// ByUpdateToken orders the results by the update_token field.
func ByUpdateToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdateToken, opts...).ToFunc()
}

// BySessionField orders the results by session field.
func BySessionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionStep(), sql.OrderByField(field, opts...))
	}
}
func newSessionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, SessionTable, SessionColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/apnstoken"
	"pentag.kr/distimer/ent/fcmtoken"
	"pentag.kr/distimer/ent/session"
	"pentag.kr/distimer/ent/user"
)

// Session is the model entity for the Session schema.
type Session struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken uuid.UUID `json:"refresh_token,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeviceType holds the value of the "device_type" field.
	DeviceType int8 `json:"device_type,omitempty"`
	// LastActive holds the value of the "last_active" field.
	LastActive time.Time `json:"last_active,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SessionQuery when eager-loading is set.
	Edges         SessionEdges `json:"edges"`
	user_sessions *uuid.UUID
	selectValues  sql.SelectValues
}

// SessionEdges holds the relations/edges for other nodes in the graph.
type SessionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// ApnsToken holds the value of the apns_token edge.
	ApnsToken *APNsToken `json:"apns_token,omitempty"`
	// FcmToken holds the value of the fcm_token edge.
	FcmToken *FCMToken `json:"fcm_token,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ApnsTokenOrErr returns the ApnsToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) ApnsTokenOrErr() (*APNsToken, error) {
	if e.ApnsToken != nil {
		return e.ApnsToken, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: apnstoken.Label}
	}
	return nil, &NotLoadedError{edge: "apns_token"}
}

// FcmTokenOrErr returns the FcmToken value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SessionEdges) FcmTokenOrErr() (*FCMToken, error) {
	if e.FcmToken != nil {
		return e.FcmToken, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: fcmtoken.Label}
	}
	return nil, &NotLoadedError{edge: "fcm_token"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Session) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case session.FieldDeviceType:
			values[i] = new(sql.NullInt64)
		case session.FieldCreatedAt, session.FieldLastActive:
			values[i] = new(sql.NullTime)
		case session.FieldID, session.FieldRefreshToken:
			values[i] = new(uuid.UUID)
		case session.ForeignKeys[0]: // user_sessions
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Session fields.
func (s *Session) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case session.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case session.FieldRefreshToken:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value != nil {
				s.RefreshToken = *value
			}
		case session.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case session.FieldDeviceType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field device_type", values[i])
			} else if value.Valid {
				s.DeviceType = int8(value.Int64)
			}
		case session.FieldLastActive:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_active", values[i])
			} else if value.Valid {
				s.LastActive = value.Time
			}
		case session.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_sessions", values[i])
			} else if value.Valid {
				s.user_sessions = new(uuid.UUID)
				*s.user_sessions = *value.S.(*uuid.UUID)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Session.
// This includes values selected through modifiers, order, etc.
func (s *Session) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Session entity.
func (s *Session) QueryOwner() *UserQuery {
	return NewSessionClient(s.config).QueryOwner(s)
}

// QueryApnsToken queries the "apns_token" edge of the Session entity.
func (s *Session) QueryApnsToken() *APNsTokenQuery {
	return NewSessionClient(s.config).QueryApnsToken(s)
}

// QueryFcmToken queries the "fcm_token" edge of the Session entity.
func (s *Session) QueryFcmToken() *FCMTokenQuery {
	return NewSessionClient(s.config).QueryFcmToken(s)
}

// Update returns a builder for updating this Session.
// Note that you need to call Session.Unwrap() before calling this method if this Session
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Session) Update() *SessionUpdateOne {
	return NewSessionClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Session entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Session) Unwrap() *Session {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Session is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Session) String() string {
	var builder strings.Builder
	builder.WriteString("Session(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("refresh_token=")
	builder.WriteString(fmt.Sprintf("%v", s.RefreshToken))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("device_type=")
	builder.WriteString(fmt.Sprintf("%v", s.DeviceType))
	builder.WriteString(", ")
	builder.WriteString("last_active=")
	builder.WriteString(s.LastActive.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Sessions is a parsable slice of Session.
type Sessions []*Session

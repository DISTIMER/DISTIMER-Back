// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/predicate"
	"pentag.kr/distimer/ent/studylog"
	"pentag.kr/distimer/ent/subject"
	"pentag.kr/distimer/ent/user"
)

// StudyLogQuery is the builder for querying StudyLog entities.
type StudyLogQuery struct {
	config
	ctx             *QueryContext
	order           []studylog.OrderOption
	inters          []Interceptor
	predicates      []predicate.StudyLog
	withUser        *UserQuery
	withSubject     *SubjectQuery
	withSharedGroup *GroupQuery
	withFKs         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the StudyLogQuery builder.
func (slq *StudyLogQuery) Where(ps ...predicate.StudyLog) *StudyLogQuery {
	slq.predicates = append(slq.predicates, ps...)
	return slq
}

// Limit the number of records to be returned by this query.
func (slq *StudyLogQuery) Limit(limit int) *StudyLogQuery {
	slq.ctx.Limit = &limit
	return slq
}

// Offset to start from.
func (slq *StudyLogQuery) Offset(offset int) *StudyLogQuery {
	slq.ctx.Offset = &offset
	return slq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (slq *StudyLogQuery) Unique(unique bool) *StudyLogQuery {
	slq.ctx.Unique = &unique
	return slq
}

// Order specifies how the records should be ordered.
func (slq *StudyLogQuery) Order(o ...studylog.OrderOption) *StudyLogQuery {
	slq.order = append(slq.order, o...)
	return slq
}

// QueryUser chains the current query on the "user" edge.
func (slq *StudyLogQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(studylog.Table, studylog.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studylog.UserTable, studylog.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubject chains the current query on the "subject" edge.
func (slq *StudyLogQuery) QuerySubject() *SubjectQuery {
	query := (&SubjectClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(studylog.Table, studylog.FieldID, selector),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studylog.SubjectTable, studylog.SubjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySharedGroup chains the current query on the "shared_group" edge.
func (slq *StudyLogQuery) QuerySharedGroup() *GroupQuery {
	query := (&GroupClient{config: slq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := slq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := slq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(studylog.Table, studylog.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, studylog.SharedGroupTable, studylog.SharedGroupPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(slq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first StudyLog entity from the query.
// Returns a *NotFoundError when no StudyLog was found.
func (slq *StudyLogQuery) First(ctx context.Context) (*StudyLog, error) {
	nodes, err := slq.Limit(1).All(setContextOp(ctx, slq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{studylog.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (slq *StudyLogQuery) FirstX(ctx context.Context) *StudyLog {
	node, err := slq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first StudyLog ID from the query.
// Returns a *NotFoundError when no StudyLog ID was found.
func (slq *StudyLogQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = slq.Limit(1).IDs(setContextOp(ctx, slq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{studylog.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (slq *StudyLogQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := slq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single StudyLog entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one StudyLog entity is found.
// Returns a *NotFoundError when no StudyLog entities are found.
func (slq *StudyLogQuery) Only(ctx context.Context) (*StudyLog, error) {
	nodes, err := slq.Limit(2).All(setContextOp(ctx, slq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{studylog.Label}
	default:
		return nil, &NotSingularError{studylog.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (slq *StudyLogQuery) OnlyX(ctx context.Context) *StudyLog {
	node, err := slq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only StudyLog ID in the query.
// Returns a *NotSingularError when more than one StudyLog ID is found.
// Returns a *NotFoundError when no entities are found.
func (slq *StudyLogQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = slq.Limit(2).IDs(setContextOp(ctx, slq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{studylog.Label}
	default:
		err = &NotSingularError{studylog.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (slq *StudyLogQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := slq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of StudyLogs.
func (slq *StudyLogQuery) All(ctx context.Context) ([]*StudyLog, error) {
	ctx = setContextOp(ctx, slq.ctx, "All")
	if err := slq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*StudyLog, *StudyLogQuery]()
	return withInterceptors[[]*StudyLog](ctx, slq, qr, slq.inters)
}

// AllX is like All, but panics if an error occurs.
func (slq *StudyLogQuery) AllX(ctx context.Context) []*StudyLog {
	nodes, err := slq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of StudyLog IDs.
func (slq *StudyLogQuery) IDs(ctx context.Context) (ids []uuid.UUID, err error) {
	if slq.ctx.Unique == nil && slq.path != nil {
		slq.Unique(true)
	}
	ctx = setContextOp(ctx, slq.ctx, "IDs")
	if err = slq.Select(studylog.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (slq *StudyLogQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := slq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (slq *StudyLogQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, slq.ctx, "Count")
	if err := slq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, slq, querierCount[*StudyLogQuery](), slq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (slq *StudyLogQuery) CountX(ctx context.Context) int {
	count, err := slq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (slq *StudyLogQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, slq.ctx, "Exist")
	switch _, err := slq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (slq *StudyLogQuery) ExistX(ctx context.Context) bool {
	exist, err := slq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the StudyLogQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (slq *StudyLogQuery) Clone() *StudyLogQuery {
	if slq == nil {
		return nil
	}
	return &StudyLogQuery{
		config:          slq.config,
		ctx:             slq.ctx.Clone(),
		order:           append([]studylog.OrderOption{}, slq.order...),
		inters:          append([]Interceptor{}, slq.inters...),
		predicates:      append([]predicate.StudyLog{}, slq.predicates...),
		withUser:        slq.withUser.Clone(),
		withSubject:     slq.withSubject.Clone(),
		withSharedGroup: slq.withSharedGroup.Clone(),
		// clone intermediate query.
		sql:  slq.sql.Clone(),
		path: slq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *StudyLogQuery) WithUser(opts ...func(*UserQuery)) *StudyLogQuery {
	query := (&UserClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withUser = query
	return slq
}

// WithSubject tells the query-builder to eager-load the nodes that are connected to
// the "subject" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *StudyLogQuery) WithSubject(opts ...func(*SubjectQuery)) *StudyLogQuery {
	query := (&SubjectClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withSubject = query
	return slq
}

// WithSharedGroup tells the query-builder to eager-load the nodes that are connected to
// the "shared_group" edge. The optional arguments are used to configure the query builder of the edge.
func (slq *StudyLogQuery) WithSharedGroup(opts ...func(*GroupQuery)) *StudyLogQuery {
	query := (&GroupClient{config: slq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	slq.withSharedGroup = query
	return slq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		StartAt time.Time `json:"start_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.StudyLog.Query().
//		GroupBy(studylog.FieldStartAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (slq *StudyLogQuery) GroupBy(field string, fields ...string) *StudyLogGroupBy {
	slq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &StudyLogGroupBy{build: slq}
	grbuild.flds = &slq.ctx.Fields
	grbuild.label = studylog.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		StartAt time.Time `json:"start_at,omitempty"`
//	}
//
//	client.StudyLog.Query().
//		Select(studylog.FieldStartAt).
//		Scan(ctx, &v)
func (slq *StudyLogQuery) Select(fields ...string) *StudyLogSelect {
	slq.ctx.Fields = append(slq.ctx.Fields, fields...)
	sbuild := &StudyLogSelect{StudyLogQuery: slq}
	sbuild.label = studylog.Label
	sbuild.flds, sbuild.scan = &slq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a StudyLogSelect configured with the given aggregations.
func (slq *StudyLogQuery) Aggregate(fns ...AggregateFunc) *StudyLogSelect {
	return slq.Select().Aggregate(fns...)
}

func (slq *StudyLogQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range slq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, slq); err != nil {
				return err
			}
		}
	}
	for _, f := range slq.ctx.Fields {
		if !studylog.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if slq.path != nil {
		prev, err := slq.path(ctx)
		if err != nil {
			return err
		}
		slq.sql = prev
	}
	return nil
}

func (slq *StudyLogQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*StudyLog, error) {
	var (
		nodes       = []*StudyLog{}
		withFKs     = slq.withFKs
		_spec       = slq.querySpec()
		loadedTypes = [3]bool{
			slq.withUser != nil,
			slq.withSubject != nil,
			slq.withSharedGroup != nil,
		}
	)
	if slq.withUser != nil || slq.withSubject != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, studylog.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*StudyLog).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &StudyLog{config: slq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, slq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := slq.withUser; query != nil {
		if err := slq.loadUser(ctx, query, nodes, nil,
			func(n *StudyLog, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := slq.withSubject; query != nil {
		if err := slq.loadSubject(ctx, query, nodes, nil,
			func(n *StudyLog, e *Subject) { n.Edges.Subject = e }); err != nil {
			return nil, err
		}
	}
	if query := slq.withSharedGroup; query != nil {
		if err := slq.loadSharedGroup(ctx, query, nodes,
			func(n *StudyLog) { n.Edges.SharedGroup = []*Group{} },
			func(n *StudyLog, e *Group) { n.Edges.SharedGroup = append(n.Edges.SharedGroup, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (slq *StudyLogQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*StudyLog, init func(*StudyLog), assign func(*StudyLog, *User)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*StudyLog)
	for i := range nodes {
		if nodes[i].user_study_logs == nil {
			continue
		}
		fk := *nodes[i].user_study_logs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_study_logs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (slq *StudyLogQuery) loadSubject(ctx context.Context, query *SubjectQuery, nodes []*StudyLog, init func(*StudyLog), assign func(*StudyLog, *Subject)) error {
	ids := make([]uuid.UUID, 0, len(nodes))
	nodeids := make(map[uuid.UUID][]*StudyLog)
	for i := range nodes {
		if nodes[i].subject_study_logs == nil {
			continue
		}
		fk := *nodes[i].subject_study_logs
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(subject.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "subject_study_logs" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (slq *StudyLogQuery) loadSharedGroup(ctx context.Context, query *GroupQuery, nodes []*StudyLog, init func(*StudyLog), assign func(*StudyLog, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[uuid.UUID]*StudyLog)
	nids := make(map[uuid.UUID]map[*StudyLog]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(studylog.SharedGroupTable)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(studylog.SharedGroupPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(studylog.SharedGroupPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(studylog.SharedGroupPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(uuid.UUID)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := *values[0].(*uuid.UUID)
				inValue := *values[1].(*uuid.UUID)
				if nids[inValue] == nil {
					nids[inValue] = map[*StudyLog]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "shared_group" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (slq *StudyLogQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := slq.querySpec()
	_spec.Node.Columns = slq.ctx.Fields
	if len(slq.ctx.Fields) > 0 {
		_spec.Unique = slq.ctx.Unique != nil && *slq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, slq.driver, _spec)
}

func (slq *StudyLogQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(studylog.Table, studylog.Columns, sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID))
	_spec.From = slq.sql
	if unique := slq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if slq.path != nil {
		_spec.Unique = true
	}
	if fields := slq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, studylog.FieldID)
		for i := range fields {
			if fields[i] != studylog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := slq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := slq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := slq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := slq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (slq *StudyLogQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(slq.driver.Dialect())
	t1 := builder.Table(studylog.Table)
	columns := slq.ctx.Fields
	if len(columns) == 0 {
		columns = studylog.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if slq.sql != nil {
		selector = slq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if slq.ctx.Unique != nil && *slq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range slq.predicates {
		p(selector)
	}
	for _, p := range slq.order {
		p(selector)
	}
	if offset := slq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := slq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// StudyLogGroupBy is the group-by builder for StudyLog entities.
type StudyLogGroupBy struct {
	selector
	build *StudyLogQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (slgb *StudyLogGroupBy) Aggregate(fns ...AggregateFunc) *StudyLogGroupBy {
	slgb.fns = append(slgb.fns, fns...)
	return slgb
}

// Scan applies the selector query and scans the result into the given value.
func (slgb *StudyLogGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, slgb.build.ctx, "GroupBy")
	if err := slgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StudyLogQuery, *StudyLogGroupBy](ctx, slgb.build, slgb, slgb.build.inters, v)
}

func (slgb *StudyLogGroupBy) sqlScan(ctx context.Context, root *StudyLogQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(slgb.fns))
	for _, fn := range slgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*slgb.flds)+len(slgb.fns))
		for _, f := range *slgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*slgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := slgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// StudyLogSelect is the builder for selecting fields of StudyLog entities.
type StudyLogSelect struct {
	*StudyLogQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (sls *StudyLogSelect) Aggregate(fns ...AggregateFunc) *StudyLogSelect {
	sls.fns = append(sls.fns, fns...)
	return sls
}

// Scan applies the selector query and scans the result into the given value.
func (sls *StudyLogSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, sls.ctx, "Select")
	if err := sls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*StudyLogQuery, *StudyLogSelect](ctx, sls.StudyLogQuery, sls, sls.inters, v)
}

func (sls *StudyLogSelect) sqlScan(ctx context.Context, root *StudyLogQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(sls.fns))
	for _, fn := range sls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*sls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := sls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

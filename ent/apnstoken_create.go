// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/apnstoken"
	"pentag.kr/distimer/ent/session"
)

// APNsTokenCreate is the builder for creating a APNsToken entity.
type APNsTokenCreate struct {
	config
	mutation *APNsTokenMutation
	hooks    []Hook
}

// SetStartToken sets the "start_token" field.
func (antc *APNsTokenCreate) SetStartToken(s string) *APNsTokenCreate {
	antc.mutation.SetStartToken(s)
	return antc
}

// SetUpdateToken sets the "update_token" field.
func (antc *APNsTokenCreate) SetUpdateToken(s string) *APNsTokenCreate {
	antc.mutation.SetUpdateToken(s)
	return antc
}

// SetSessionID sets the "session" edge to the Session entity by ID.
func (antc *APNsTokenCreate) SetSessionID(id uuid.UUID) *APNsTokenCreate {
	antc.mutation.SetSessionID(id)
	return antc
}

// SetSession sets the "session" edge to the Session entity.
func (antc *APNsTokenCreate) SetSession(s *Session) *APNsTokenCreate {
	return antc.SetSessionID(s.ID)
}

// Mutation returns the APNsTokenMutation object of the builder.
func (antc *APNsTokenCreate) Mutation() *APNsTokenMutation {
	return antc.mutation
}

// Save creates the APNsToken in the database.
func (antc *APNsTokenCreate) Save(ctx context.Context) (*APNsToken, error) {
	return withHooks(ctx, antc.sqlSave, antc.mutation, antc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (antc *APNsTokenCreate) SaveX(ctx context.Context) *APNsToken {
	v, err := antc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (antc *APNsTokenCreate) Exec(ctx context.Context) error {
	_, err := antc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (antc *APNsTokenCreate) ExecX(ctx context.Context) {
	if err := antc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (antc *APNsTokenCreate) check() error {
	if _, ok := antc.mutation.StartToken(); !ok {
		return &ValidationError{Name: "start_token", err: errors.New(`ent: missing required field "APNsToken.start_token"`)}
	}
	if _, ok := antc.mutation.UpdateToken(); !ok {
		return &ValidationError{Name: "update_token", err: errors.New(`ent: missing required field "APNsToken.update_token"`)}
	}
	if _, ok := antc.mutation.SessionID(); !ok {
		return &ValidationError{Name: "session", err: errors.New(`ent: missing required edge "APNsToken.session"`)}
	}
	return nil
}

func (antc *APNsTokenCreate) sqlSave(ctx context.Context) (*APNsToken, error) {
	if err := antc.check(); err != nil {
		return nil, err
	}
	_node, _spec := antc.createSpec()
	if err := sqlgraph.CreateNode(ctx, antc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	antc.mutation.id = &_node.ID
	antc.mutation.done = true
	return _node, nil
}

func (antc *APNsTokenCreate) createSpec() (*APNsToken, *sqlgraph.CreateSpec) {
	var (
		_node = &APNsToken{config: antc.config}
		_spec = sqlgraph.NewCreateSpec(apnstoken.Table, sqlgraph.NewFieldSpec(apnstoken.FieldID, field.TypeInt))
	)
	if value, ok := antc.mutation.StartToken(); ok {
		_spec.SetField(apnstoken.FieldStartToken, field.TypeString, value)
		_node.StartToken = value
	}
	if value, ok := antc.mutation.UpdateToken(); ok {
		_spec.SetField(apnstoken.FieldUpdateToken, field.TypeString, value)
		_node.UpdateToken = value
	}
	if nodes := antc.mutation.SessionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   apnstoken.SessionTable,
			Columns: []string{apnstoken.SessionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.session_apns_token = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// APNsTokenCreateBulk is the builder for creating many APNsToken entities in bulk.
type APNsTokenCreateBulk struct {
	config
	err      error
	builders []*APNsTokenCreate
}

// Save creates the APNsToken entities in the database.
func (antcb *APNsTokenCreateBulk) Save(ctx context.Context) ([]*APNsToken, error) {
	if antcb.err != nil {
		return nil, antcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(antcb.builders))
	nodes := make([]*APNsToken, len(antcb.builders))
	mutators := make([]Mutator, len(antcb.builders))
	for i := range antcb.builders {
		func(i int, root context.Context) {
			builder := antcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*APNsTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, antcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, antcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, antcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (antcb *APNsTokenCreateBulk) SaveX(ctx context.Context) []*APNsToken {
	v, err := antcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (antcb *APNsTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := antcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (antcb *APNsTokenCreateBulk) ExecX(ctx context.Context) {
	if err := antcb.Exec(ctx); err != nil {
		panic(err)
	}
}

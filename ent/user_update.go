// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/category"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/predicate"
	"pentag.kr/distimer/ent/session"
	"pentag.kr/distimer/ent/studylog"
	"pentag.kr/distimer/ent/timer"
	"pentag.kr/distimer/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableName(s *string) *UserUpdate {
	if s != nil {
		uu.SetName(*s)
	}
	return uu
}

// SetOauthID sets the "oauth_id" field.
func (uu *UserUpdate) SetOauthID(s string) *UserUpdate {
	uu.mutation.SetOauthID(s)
	return uu
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOauthID(s *string) *UserUpdate {
	if s != nil {
		uu.SetOauthID(*s)
	}
	return uu
}

// SetOauthProvider sets the "oauth_provider" field.
func (uu *UserUpdate) SetOauthProvider(i int8) *UserUpdate {
	uu.mutation.ResetOauthProvider()
	uu.mutation.SetOauthProvider(i)
	return uu
}

// SetNillableOauthProvider sets the "oauth_provider" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOauthProvider(i *int8) *UserUpdate {
	if i != nil {
		uu.SetOauthProvider(*i)
	}
	return uu
}

// AddOauthProvider adds i to the "oauth_provider" field.
func (uu *UserUpdate) AddOauthProvider(i int8) *UserUpdate {
	uu.mutation.AddOauthProvider(i)
	return uu
}

// SetTermsAgreed sets the "terms_agreed" field.
func (uu *UserUpdate) SetTermsAgreed(b bool) *UserUpdate {
	uu.mutation.SetTermsAgreed(b)
	return uu
}

// SetNillableTermsAgreed sets the "terms_agreed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTermsAgreed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetTermsAgreed(*b)
	}
	return uu
}

// AddJoinedGroupIDs adds the "joined_groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddJoinedGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddJoinedGroupIDs(ids...)
	return uu
}

// AddJoinedGroups adds the "joined_groups" edges to the Group entity.
func (uu *UserUpdate) AddJoinedGroups(g ...*Group) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddJoinedGroupIDs(ids...)
}

// AddOwnedGroupIDs adds the "owned_groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddOwnedGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddOwnedGroupIDs(ids...)
	return uu
}

// AddOwnedGroups adds the "owned_groups" edges to the Group entity.
func (uu *UserUpdate) AddOwnedGroups(g ...*Group) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddOwnedGroupIDs(ids...)
}

// AddStudyLogIDs adds the "study_logs" edge to the StudyLog entity by IDs.
func (uu *UserUpdate) AddStudyLogIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddStudyLogIDs(ids...)
	return uu
}

// AddStudyLogs adds the "study_logs" edges to the StudyLog entity.
func (uu *UserUpdate) AddStudyLogs(s ...*StudyLog) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddStudyLogIDs(ids...)
}

// SetTimersID sets the "timers" edge to the Timer entity by ID.
func (uu *UserUpdate) SetTimersID(id uuid.UUID) *UserUpdate {
	uu.mutation.SetTimersID(id)
	return uu
}

// SetNillableTimersID sets the "timers" edge to the Timer entity by ID if the given value is not nil.
func (uu *UserUpdate) SetNillableTimersID(id *uuid.UUID) *UserUpdate {
	if id != nil {
		uu = uu.SetTimersID(*id)
	}
	return uu
}

// SetTimers sets the "timers" edge to the Timer entity.
func (uu *UserUpdate) SetTimers(t *Timer) *UserUpdate {
	return uu.SetTimersID(t.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddOwnedCategoryIDs adds the "owned_categories" edge to the Category entity by IDs.
func (uu *UserUpdate) AddOwnedCategoryIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddOwnedCategoryIDs(ids...)
	return uu
}

// AddOwnedCategories adds the "owned_categories" edges to the Category entity.
func (uu *UserUpdate) AddOwnedCategories(c ...*Category) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.AddOwnedCategoryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearJoinedGroups clears all "joined_groups" edges to the Group entity.
func (uu *UserUpdate) ClearJoinedGroups() *UserUpdate {
	uu.mutation.ClearJoinedGroups()
	return uu
}

// RemoveJoinedGroupIDs removes the "joined_groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveJoinedGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveJoinedGroupIDs(ids...)
	return uu
}

// RemoveJoinedGroups removes "joined_groups" edges to Group entities.
func (uu *UserUpdate) RemoveJoinedGroups(g ...*Group) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveJoinedGroupIDs(ids...)
}

// ClearOwnedGroups clears all "owned_groups" edges to the Group entity.
func (uu *UserUpdate) ClearOwnedGroups() *UserUpdate {
	uu.mutation.ClearOwnedGroups()
	return uu
}

// RemoveOwnedGroupIDs removes the "owned_groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveOwnedGroupIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveOwnedGroupIDs(ids...)
	return uu
}

// RemoveOwnedGroups removes "owned_groups" edges to Group entities.
func (uu *UserUpdate) RemoveOwnedGroups(g ...*Group) *UserUpdate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveOwnedGroupIDs(ids...)
}

// ClearStudyLogs clears all "study_logs" edges to the StudyLog entity.
func (uu *UserUpdate) ClearStudyLogs() *UserUpdate {
	uu.mutation.ClearStudyLogs()
	return uu
}

// RemoveStudyLogIDs removes the "study_logs" edge to StudyLog entities by IDs.
func (uu *UserUpdate) RemoveStudyLogIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveStudyLogIDs(ids...)
	return uu
}

// RemoveStudyLogs removes "study_logs" edges to StudyLog entities.
func (uu *UserUpdate) RemoveStudyLogs(s ...*StudyLog) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveStudyLogIDs(ids...)
}

// ClearTimers clears the "timers" edge to the Timer entity.
func (uu *UserUpdate) ClearTimers() *UserUpdate {
	uu.mutation.ClearTimers()
	return uu
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearOwnedCategories clears all "owned_categories" edges to the Category entity.
func (uu *UserUpdate) ClearOwnedCategories() *UserUpdate {
	uu.mutation.ClearOwnedCategories()
	return uu
}

// RemoveOwnedCategoryIDs removes the "owned_categories" edge to Category entities by IDs.
func (uu *UserUpdate) RemoveOwnedCategoryIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveOwnedCategoryIDs(ids...)
	return uu
}

// RemoveOwnedCategories removes "owned_categories" edges to Category entities.
func (uu *UserUpdate) RemoveOwnedCategories(c ...*Category) *UserUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uu.RemoveOwnedCategoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.OauthID(); ok {
		_spec.SetField(user.FieldOauthID, field.TypeString, value)
	}
	if value, ok := uu.mutation.OauthProvider(); ok {
		_spec.SetField(user.FieldOauthProvider, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.AddedOauthProvider(); ok {
		_spec.AddField(user.FieldOauthProvider, field.TypeInt8, value)
	}
	if value, ok := uu.mutation.TermsAgreed(); ok {
		_spec.SetField(user.FieldTermsAgreed, field.TypeBool, value)
	}
	if uu.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		createE := &AffiliationCreate{config: uu.config, mutation: newAffiliationMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedJoinedGroupsIDs(); len(nodes) > 0 && !uu.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AffiliationCreate{config: uu.config, mutation: newAffiliationMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.JoinedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AffiliationCreate{config: uu.config, mutation: newAffiliationMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OwnedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGroupsTable,
			Columns: []string{user.OwnedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnedGroupsIDs(); len(nodes) > 0 && !uu.mutation.OwnedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGroupsTable,
			Columns: []string{user.OwnedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGroupsTable,
			Columns: []string{user.OwnedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.StudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StudyLogsTable,
			Columns: []string{user.StudyLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedStudyLogsIDs(); len(nodes) > 0 && !uu.mutation.StudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StudyLogsTable,
			Columns: []string{user.StudyLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.StudyLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StudyLogsTable,
			Columns: []string{user.StudyLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.TimersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TimersTable,
			Columns: []string{user.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.TimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TimersTable,
			Columns: []string{user.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OwnedCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedCategoriesTable,
			Columns: []string{user.OwnedCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOwnedCategoriesIDs(); len(nodes) > 0 && !uu.mutation.OwnedCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedCategoriesTable,
			Columns: []string{user.OwnedCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OwnedCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedCategoriesTable,
			Columns: []string{user.OwnedCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetName(*s)
	}
	return uuo
}

// SetOauthID sets the "oauth_id" field.
func (uuo *UserUpdateOne) SetOauthID(s string) *UserUpdateOne {
	uuo.mutation.SetOauthID(s)
	return uuo
}

// SetNillableOauthID sets the "oauth_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOauthID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetOauthID(*s)
	}
	return uuo
}

// SetOauthProvider sets the "oauth_provider" field.
func (uuo *UserUpdateOne) SetOauthProvider(i int8) *UserUpdateOne {
	uuo.mutation.ResetOauthProvider()
	uuo.mutation.SetOauthProvider(i)
	return uuo
}

// SetNillableOauthProvider sets the "oauth_provider" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOauthProvider(i *int8) *UserUpdateOne {
	if i != nil {
		uuo.SetOauthProvider(*i)
	}
	return uuo
}

// AddOauthProvider adds i to the "oauth_provider" field.
func (uuo *UserUpdateOne) AddOauthProvider(i int8) *UserUpdateOne {
	uuo.mutation.AddOauthProvider(i)
	return uuo
}

// SetTermsAgreed sets the "terms_agreed" field.
func (uuo *UserUpdateOne) SetTermsAgreed(b bool) *UserUpdateOne {
	uuo.mutation.SetTermsAgreed(b)
	return uuo
}

// SetNillableTermsAgreed sets the "terms_agreed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTermsAgreed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetTermsAgreed(*b)
	}
	return uuo
}

// AddJoinedGroupIDs adds the "joined_groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddJoinedGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddJoinedGroupIDs(ids...)
	return uuo
}

// AddJoinedGroups adds the "joined_groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddJoinedGroups(g ...*Group) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddJoinedGroupIDs(ids...)
}

// AddOwnedGroupIDs adds the "owned_groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddOwnedGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddOwnedGroupIDs(ids...)
	return uuo
}

// AddOwnedGroups adds the "owned_groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddOwnedGroups(g ...*Group) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddOwnedGroupIDs(ids...)
}

// AddStudyLogIDs adds the "study_logs" edge to the StudyLog entity by IDs.
func (uuo *UserUpdateOne) AddStudyLogIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddStudyLogIDs(ids...)
	return uuo
}

// AddStudyLogs adds the "study_logs" edges to the StudyLog entity.
func (uuo *UserUpdateOne) AddStudyLogs(s ...*StudyLog) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddStudyLogIDs(ids...)
}

// SetTimersID sets the "timers" edge to the Timer entity by ID.
func (uuo *UserUpdateOne) SetTimersID(id uuid.UUID) *UserUpdateOne {
	uuo.mutation.SetTimersID(id)
	return uuo
}

// SetNillableTimersID sets the "timers" edge to the Timer entity by ID if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTimersID(id *uuid.UUID) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetTimersID(*id)
	}
	return uuo
}

// SetTimers sets the "timers" edge to the Timer entity.
func (uuo *UserUpdateOne) SetTimers(t *Timer) *UserUpdateOne {
	return uuo.SetTimersID(t.ID)
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddOwnedCategoryIDs adds the "owned_categories" edge to the Category entity by IDs.
func (uuo *UserUpdateOne) AddOwnedCategoryIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddOwnedCategoryIDs(ids...)
	return uuo
}

// AddOwnedCategories adds the "owned_categories" edges to the Category entity.
func (uuo *UserUpdateOne) AddOwnedCategories(c ...*Category) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.AddOwnedCategoryIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearJoinedGroups clears all "joined_groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearJoinedGroups() *UserUpdateOne {
	uuo.mutation.ClearJoinedGroups()
	return uuo
}

// RemoveJoinedGroupIDs removes the "joined_groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveJoinedGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveJoinedGroupIDs(ids...)
	return uuo
}

// RemoveJoinedGroups removes "joined_groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveJoinedGroups(g ...*Group) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveJoinedGroupIDs(ids...)
}

// ClearOwnedGroups clears all "owned_groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearOwnedGroups() *UserUpdateOne {
	uuo.mutation.ClearOwnedGroups()
	return uuo
}

// RemoveOwnedGroupIDs removes the "owned_groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnedGroupIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveOwnedGroupIDs(ids...)
	return uuo
}

// RemoveOwnedGroups removes "owned_groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveOwnedGroups(g ...*Group) *UserUpdateOne {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveOwnedGroupIDs(ids...)
}

// ClearStudyLogs clears all "study_logs" edges to the StudyLog entity.
func (uuo *UserUpdateOne) ClearStudyLogs() *UserUpdateOne {
	uuo.mutation.ClearStudyLogs()
	return uuo
}

// RemoveStudyLogIDs removes the "study_logs" edge to StudyLog entities by IDs.
func (uuo *UserUpdateOne) RemoveStudyLogIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveStudyLogIDs(ids...)
	return uuo
}

// RemoveStudyLogs removes "study_logs" edges to StudyLog entities.
func (uuo *UserUpdateOne) RemoveStudyLogs(s ...*StudyLog) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveStudyLogIDs(ids...)
}

// ClearTimers clears the "timers" edge to the Timer entity.
func (uuo *UserUpdateOne) ClearTimers() *UserUpdateOne {
	uuo.mutation.ClearTimers()
	return uuo
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearOwnedCategories clears all "owned_categories" edges to the Category entity.
func (uuo *UserUpdateOne) ClearOwnedCategories() *UserUpdateOne {
	uuo.mutation.ClearOwnedCategories()
	return uuo
}

// RemoveOwnedCategoryIDs removes the "owned_categories" edge to Category entities by IDs.
func (uuo *UserUpdateOne) RemoveOwnedCategoryIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveOwnedCategoryIDs(ids...)
	return uuo
}

// RemoveOwnedCategories removes "owned_categories" edges to Category entities.
func (uuo *UserUpdateOne) RemoveOwnedCategories(c ...*Category) *UserUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return uuo.RemoveOwnedCategoryIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.OauthID(); ok {
		_spec.SetField(user.FieldOauthID, field.TypeString, value)
	}
	if value, ok := uuo.mutation.OauthProvider(); ok {
		_spec.SetField(user.FieldOauthProvider, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.AddedOauthProvider(); ok {
		_spec.AddField(user.FieldOauthProvider, field.TypeInt8, value)
	}
	if value, ok := uuo.mutation.TermsAgreed(); ok {
		_spec.SetField(user.FieldTermsAgreed, field.TypeBool, value)
	}
	if uuo.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		createE := &AffiliationCreate{config: uuo.config, mutation: newAffiliationMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedJoinedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.JoinedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AffiliationCreate{config: uuo.config, mutation: newAffiliationMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.JoinedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.JoinedGroupsTable,
			Columns: user.JoinedGroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AffiliationCreate{config: uuo.config, mutation: newAffiliationMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OwnedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGroupsTable,
			Columns: []string{user.OwnedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.OwnedGroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGroupsTable,
			Columns: []string{user.OwnedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedGroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedGroupsTable,
			Columns: []string{user.OwnedGroupsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.StudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StudyLogsTable,
			Columns: []string{user.StudyLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedStudyLogsIDs(); len(nodes) > 0 && !uuo.mutation.StudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StudyLogsTable,
			Columns: []string{user.StudyLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.StudyLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.StudyLogsTable,
			Columns: []string{user.StudyLogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.TimersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TimersTable,
			Columns: []string{user.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.TimersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.TimersTable,
			Columns: []string{user.TimersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OwnedCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedCategoriesTable,
			Columns: []string{user.OwnedCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOwnedCategoriesIDs(); len(nodes) > 0 && !uuo.mutation.OwnedCategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedCategoriesTable,
			Columns: []string{user.OwnedCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OwnedCategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.OwnedCategoriesTable,
			Columns: []string{user.OwnedCategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}

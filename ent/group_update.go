// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/invitecode"
	"pentag.kr/distimer/ent/predicate"
	"pentag.kr/distimer/ent/studylog"
	"pentag.kr/distimer/ent/user"
)

// GroupUpdate is the builder for updating Group entities.
type GroupUpdate struct {
	config
	hooks    []Hook
	mutation *GroupMutation
}

// Where appends a list predicates to the GroupUpdate builder.
func (gu *GroupUpdate) Where(ps ...predicate.Group) *GroupUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetName sets the "name" field.
func (gu *GroupUpdate) SetName(s string) *GroupUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableName(s *string) *GroupUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetDescription sets the "description" field.
func (gu *GroupUpdate) SetDescription(s string) *GroupUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableDescription(s *string) *GroupUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// SetNicknamePolicy sets the "nickname_policy" field.
func (gu *GroupUpdate) SetNicknamePolicy(s string) *GroupUpdate {
	gu.mutation.SetNicknamePolicy(s)
	return gu
}

// SetNillableNicknamePolicy sets the "nickname_policy" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableNicknamePolicy(s *string) *GroupUpdate {
	if s != nil {
		gu.SetNicknamePolicy(*s)
	}
	return gu
}

// SetRevealPolicy sets the "reveal_policy" field.
func (gu *GroupUpdate) SetRevealPolicy(i int8) *GroupUpdate {
	gu.mutation.ResetRevealPolicy()
	gu.mutation.SetRevealPolicy(i)
	return gu
}

// SetNillableRevealPolicy sets the "reveal_policy" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableRevealPolicy(i *int8) *GroupUpdate {
	if i != nil {
		gu.SetRevealPolicy(*i)
	}
	return gu
}

// AddRevealPolicy adds i to the "reveal_policy" field.
func (gu *GroupUpdate) AddRevealPolicy(i int8) *GroupUpdate {
	gu.mutation.AddRevealPolicy(i)
	return gu
}

// SetInvitePolicy sets the "invite_policy" field.
func (gu *GroupUpdate) SetInvitePolicy(i int8) *GroupUpdate {
	gu.mutation.ResetInvitePolicy()
	gu.mutation.SetInvitePolicy(i)
	return gu
}

// SetNillableInvitePolicy sets the "invite_policy" field if the given value is not nil.
func (gu *GroupUpdate) SetNillableInvitePolicy(i *int8) *GroupUpdate {
	if i != nil {
		gu.SetInvitePolicy(*i)
	}
	return gu
}

// AddInvitePolicy adds i to the "invite_policy" field.
func (gu *GroupUpdate) AddInvitePolicy(i int8) *GroupUpdate {
	gu.mutation.AddInvitePolicy(i)
	return gu
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (gu *GroupUpdate) AddMemberIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.AddMemberIDs(ids...)
	return gu
}

// AddMembers adds the "members" edges to the User entity.
func (gu *GroupUpdate) AddMembers(u ...*User) *GroupUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.AddMemberIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gu *GroupUpdate) SetOwnerID(id uuid.UUID) *GroupUpdate {
	gu.mutation.SetOwnerID(id)
	return gu
}

// SetOwner sets the "owner" edge to the User entity.
func (gu *GroupUpdate) SetOwner(u *User) *GroupUpdate {
	return gu.SetOwnerID(u.ID)
}

// AddSharedStudyLogIDs adds the "shared_study_logs" edge to the StudyLog entity by IDs.
func (gu *GroupUpdate) AddSharedStudyLogIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.AddSharedStudyLogIDs(ids...)
	return gu
}

// AddSharedStudyLogs adds the "shared_study_logs" edges to the StudyLog entity.
func (gu *GroupUpdate) AddSharedStudyLogs(s ...*StudyLog) *GroupUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gu.AddSharedStudyLogIDs(ids...)
}

// AddInviteCodeIDs adds the "invite_codes" edge to the InviteCode entity by IDs.
func (gu *GroupUpdate) AddInviteCodeIDs(ids ...int) *GroupUpdate {
	gu.mutation.AddInviteCodeIDs(ids...)
	return gu
}

// AddInviteCodes adds the "invite_codes" edges to the InviteCode entity.
func (gu *GroupUpdate) AddInviteCodes(i ...*InviteCode) *GroupUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddInviteCodeIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (gu *GroupUpdate) Mutation() *GroupMutation {
	return gu.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (gu *GroupUpdate) ClearMembers() *GroupUpdate {
	gu.mutation.ClearMembers()
	return gu
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (gu *GroupUpdate) RemoveMemberIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.RemoveMemberIDs(ids...)
	return gu
}

// RemoveMembers removes "members" edges to User entities.
func (gu *GroupUpdate) RemoveMembers(u ...*User) *GroupUpdate {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return gu.RemoveMemberIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (gu *GroupUpdate) ClearOwner() *GroupUpdate {
	gu.mutation.ClearOwner()
	return gu
}

// ClearSharedStudyLogs clears all "shared_study_logs" edges to the StudyLog entity.
func (gu *GroupUpdate) ClearSharedStudyLogs() *GroupUpdate {
	gu.mutation.ClearSharedStudyLogs()
	return gu
}

// RemoveSharedStudyLogIDs removes the "shared_study_logs" edge to StudyLog entities by IDs.
func (gu *GroupUpdate) RemoveSharedStudyLogIDs(ids ...uuid.UUID) *GroupUpdate {
	gu.mutation.RemoveSharedStudyLogIDs(ids...)
	return gu
}

// RemoveSharedStudyLogs removes "shared_study_logs" edges to StudyLog entities.
func (gu *GroupUpdate) RemoveSharedStudyLogs(s ...*StudyLog) *GroupUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return gu.RemoveSharedStudyLogIDs(ids...)
}

// ClearInviteCodes clears all "invite_codes" edges to the InviteCode entity.
func (gu *GroupUpdate) ClearInviteCodes() *GroupUpdate {
	gu.mutation.ClearInviteCodes()
	return gu
}

// RemoveInviteCodeIDs removes the "invite_codes" edge to InviteCode entities by IDs.
func (gu *GroupUpdate) RemoveInviteCodeIDs(ids ...int) *GroupUpdate {
	gu.mutation.RemoveInviteCodeIDs(ids...)
	return gu
}

// RemoveInviteCodes removes "invite_codes" edges to InviteCode entities.
func (gu *GroupUpdate) RemoveInviteCodes(i ...*InviteCode) *GroupUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveInviteCodeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GroupUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GroupUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GroupUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GroupUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GroupUpdate) check() error {
	if _, ok := gu.mutation.OwnerID(); gu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Group.owner"`)
	}
	return nil
}

func (gu *GroupUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if value, ok := gu.mutation.NicknamePolicy(); ok {
		_spec.SetField(group.FieldNicknamePolicy, field.TypeString, value)
	}
	if value, ok := gu.mutation.RevealPolicy(); ok {
		_spec.SetField(group.FieldRevealPolicy, field.TypeInt8, value)
	}
	if value, ok := gu.mutation.AddedRevealPolicy(); ok {
		_spec.AddField(group.FieldRevealPolicy, field.TypeInt8, value)
	}
	if value, ok := gu.mutation.InvitePolicy(); ok {
		_spec.SetField(group.FieldInvitePolicy, field.TypeInt8, value)
	}
	if value, ok := gu.mutation.AddedInvitePolicy(); ok {
		_spec.AddField(group.FieldInvitePolicy, field.TypeInt8, value)
	}
	if gu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !gu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.SharedStudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SharedStudyLogsTable,
			Columns: group.SharedStudyLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedSharedStudyLogsIDs(); len(nodes) > 0 && !gu.mutation.SharedStudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SharedStudyLogsTable,
			Columns: group.SharedStudyLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.SharedStudyLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SharedStudyLogsTable,
			Columns: group.SharedStudyLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.InviteCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.InviteCodesTable,
			Columns: []string{group.InviteCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedInviteCodesIDs(); len(nodes) > 0 && !gu.mutation.InviteCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.InviteCodesTable,
			Columns: []string{group.InviteCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InviteCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.InviteCodesTable,
			Columns: []string{group.InviteCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GroupUpdateOne is the builder for updating a single Group entity.
type GroupUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GroupMutation
}

// SetName sets the "name" field.
func (guo *GroupUpdateOne) SetName(s string) *GroupUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableName(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetDescription sets the "description" field.
func (guo *GroupUpdateOne) SetDescription(s string) *GroupUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableDescription(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// SetNicknamePolicy sets the "nickname_policy" field.
func (guo *GroupUpdateOne) SetNicknamePolicy(s string) *GroupUpdateOne {
	guo.mutation.SetNicknamePolicy(s)
	return guo
}

// SetNillableNicknamePolicy sets the "nickname_policy" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableNicknamePolicy(s *string) *GroupUpdateOne {
	if s != nil {
		guo.SetNicknamePolicy(*s)
	}
	return guo
}

// SetRevealPolicy sets the "reveal_policy" field.
func (guo *GroupUpdateOne) SetRevealPolicy(i int8) *GroupUpdateOne {
	guo.mutation.ResetRevealPolicy()
	guo.mutation.SetRevealPolicy(i)
	return guo
}

// SetNillableRevealPolicy sets the "reveal_policy" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableRevealPolicy(i *int8) *GroupUpdateOne {
	if i != nil {
		guo.SetRevealPolicy(*i)
	}
	return guo
}

// AddRevealPolicy adds i to the "reveal_policy" field.
func (guo *GroupUpdateOne) AddRevealPolicy(i int8) *GroupUpdateOne {
	guo.mutation.AddRevealPolicy(i)
	return guo
}

// SetInvitePolicy sets the "invite_policy" field.
func (guo *GroupUpdateOne) SetInvitePolicy(i int8) *GroupUpdateOne {
	guo.mutation.ResetInvitePolicy()
	guo.mutation.SetInvitePolicy(i)
	return guo
}

// SetNillableInvitePolicy sets the "invite_policy" field if the given value is not nil.
func (guo *GroupUpdateOne) SetNillableInvitePolicy(i *int8) *GroupUpdateOne {
	if i != nil {
		guo.SetInvitePolicy(*i)
	}
	return guo
}

// AddInvitePolicy adds i to the "invite_policy" field.
func (guo *GroupUpdateOne) AddInvitePolicy(i int8) *GroupUpdateOne {
	guo.mutation.AddInvitePolicy(i)
	return guo
}

// AddMemberIDs adds the "members" edge to the User entity by IDs.
func (guo *GroupUpdateOne) AddMemberIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.AddMemberIDs(ids...)
	return guo
}

// AddMembers adds the "members" edges to the User entity.
func (guo *GroupUpdateOne) AddMembers(u ...*User) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.AddMemberIDs(ids...)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (guo *GroupUpdateOne) SetOwnerID(id uuid.UUID) *GroupUpdateOne {
	guo.mutation.SetOwnerID(id)
	return guo
}

// SetOwner sets the "owner" edge to the User entity.
func (guo *GroupUpdateOne) SetOwner(u *User) *GroupUpdateOne {
	return guo.SetOwnerID(u.ID)
}

// AddSharedStudyLogIDs adds the "shared_study_logs" edge to the StudyLog entity by IDs.
func (guo *GroupUpdateOne) AddSharedStudyLogIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.AddSharedStudyLogIDs(ids...)
	return guo
}

// AddSharedStudyLogs adds the "shared_study_logs" edges to the StudyLog entity.
func (guo *GroupUpdateOne) AddSharedStudyLogs(s ...*StudyLog) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return guo.AddSharedStudyLogIDs(ids...)
}

// AddInviteCodeIDs adds the "invite_codes" edge to the InviteCode entity by IDs.
func (guo *GroupUpdateOne) AddInviteCodeIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.AddInviteCodeIDs(ids...)
	return guo
}

// AddInviteCodes adds the "invite_codes" edges to the InviteCode entity.
func (guo *GroupUpdateOne) AddInviteCodes(i ...*InviteCode) *GroupUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddInviteCodeIDs(ids...)
}

// Mutation returns the GroupMutation object of the builder.
func (guo *GroupUpdateOne) Mutation() *GroupMutation {
	return guo.mutation
}

// ClearMembers clears all "members" edges to the User entity.
func (guo *GroupUpdateOne) ClearMembers() *GroupUpdateOne {
	guo.mutation.ClearMembers()
	return guo
}

// RemoveMemberIDs removes the "members" edge to User entities by IDs.
func (guo *GroupUpdateOne) RemoveMemberIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.RemoveMemberIDs(ids...)
	return guo
}

// RemoveMembers removes "members" edges to User entities.
func (guo *GroupUpdateOne) RemoveMembers(u ...*User) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return guo.RemoveMemberIDs(ids...)
}

// ClearOwner clears the "owner" edge to the User entity.
func (guo *GroupUpdateOne) ClearOwner() *GroupUpdateOne {
	guo.mutation.ClearOwner()
	return guo
}

// ClearSharedStudyLogs clears all "shared_study_logs" edges to the StudyLog entity.
func (guo *GroupUpdateOne) ClearSharedStudyLogs() *GroupUpdateOne {
	guo.mutation.ClearSharedStudyLogs()
	return guo
}

// RemoveSharedStudyLogIDs removes the "shared_study_logs" edge to StudyLog entities by IDs.
func (guo *GroupUpdateOne) RemoveSharedStudyLogIDs(ids ...uuid.UUID) *GroupUpdateOne {
	guo.mutation.RemoveSharedStudyLogIDs(ids...)
	return guo
}

// RemoveSharedStudyLogs removes "shared_study_logs" edges to StudyLog entities.
func (guo *GroupUpdateOne) RemoveSharedStudyLogs(s ...*StudyLog) *GroupUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return guo.RemoveSharedStudyLogIDs(ids...)
}

// ClearInviteCodes clears all "invite_codes" edges to the InviteCode entity.
func (guo *GroupUpdateOne) ClearInviteCodes() *GroupUpdateOne {
	guo.mutation.ClearInviteCodes()
	return guo
}

// RemoveInviteCodeIDs removes the "invite_codes" edge to InviteCode entities by IDs.
func (guo *GroupUpdateOne) RemoveInviteCodeIDs(ids ...int) *GroupUpdateOne {
	guo.mutation.RemoveInviteCodeIDs(ids...)
	return guo
}

// RemoveInviteCodes removes "invite_codes" edges to InviteCode entities.
func (guo *GroupUpdateOne) RemoveInviteCodes(i ...*InviteCode) *GroupUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveInviteCodeIDs(ids...)
}

// Where appends a list predicates to the GroupUpdate builder.
func (guo *GroupUpdateOne) Where(ps ...predicate.Group) *GroupUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GroupUpdateOne) Select(field string, fields ...string) *GroupUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Group entity.
func (guo *GroupUpdateOne) Save(ctx context.Context) (*Group, error) {
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GroupUpdateOne) SaveX(ctx context.Context) *Group {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GroupUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GroupUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GroupUpdateOne) check() error {
	if _, ok := guo.mutation.OwnerID(); guo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Group.owner"`)
	}
	return nil
}

func (guo *GroupUpdateOne) sqlSave(ctx context.Context) (_node *Group, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(group.Table, group.Columns, sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Group.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, group.FieldID)
		for _, f := range fields {
			if !group.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != group.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(group.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(group.FieldDescription, field.TypeString, value)
	}
	if value, ok := guo.mutation.NicknamePolicy(); ok {
		_spec.SetField(group.FieldNicknamePolicy, field.TypeString, value)
	}
	if value, ok := guo.mutation.RevealPolicy(); ok {
		_spec.SetField(group.FieldRevealPolicy, field.TypeInt8, value)
	}
	if value, ok := guo.mutation.AddedRevealPolicy(); ok {
		_spec.AddField(group.FieldRevealPolicy, field.TypeInt8, value)
	}
	if value, ok := guo.mutation.InvitePolicy(); ok {
		_spec.SetField(group.FieldInvitePolicy, field.TypeInt8, value)
	}
	if value, ok := guo.mutation.AddedInvitePolicy(); ok {
		_spec.AddField(group.FieldInvitePolicy, field.TypeInt8, value)
	}
	if guo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !guo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: group.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.SharedStudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SharedStudyLogsTable,
			Columns: group.SharedStudyLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedSharedStudyLogsIDs(); len(nodes) > 0 && !guo.mutation.SharedStudyLogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SharedStudyLogsTable,
			Columns: group.SharedStudyLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.SharedStudyLogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.SharedStudyLogsTable,
			Columns: group.SharedStudyLogsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(studylog.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.InviteCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.InviteCodesTable,
			Columns: []string{group.InviteCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedInviteCodesIDs(); len(nodes) > 0 && !guo.mutation.InviteCodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.InviteCodesTable,
			Columns: []string{group.InviteCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InviteCodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   group.InviteCodesTable,
			Columns: []string{group.InviteCodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Group{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{group.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}

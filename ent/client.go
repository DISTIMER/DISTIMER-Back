// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"pentag.kr/distimer/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"pentag.kr/distimer/ent/affiliation"
	"pentag.kr/distimer/ent/apnstoken"
	"pentag.kr/distimer/ent/category"
	"pentag.kr/distimer/ent/deleteduser"
	"pentag.kr/distimer/ent/fcmtoken"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/invitecode"
	"pentag.kr/distimer/ent/session"
	"pentag.kr/distimer/ent/studylog"
	"pentag.kr/distimer/ent/subject"
	"pentag.kr/distimer/ent/timer"
	"pentag.kr/distimer/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// APNsToken is the client for interacting with the APNsToken builders.
	APNsToken *APNsTokenClient
	// Affiliation is the client for interacting with the Affiliation builders.
	Affiliation *AffiliationClient
	// Category is the client for interacting with the Category builders.
	Category *CategoryClient
	// DeletedUser is the client for interacting with the DeletedUser builders.
	DeletedUser *DeletedUserClient
	// FCMToken is the client for interacting with the FCMToken builders.
	FCMToken *FCMTokenClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// InviteCode is the client for interacting with the InviteCode builders.
	InviteCode *InviteCodeClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// StudyLog is the client for interacting with the StudyLog builders.
	StudyLog *StudyLogClient
	// Subject is the client for interacting with the Subject builders.
	Subject *SubjectClient
	// Timer is the client for interacting with the Timer builders.
	Timer *TimerClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.APNsToken = NewAPNsTokenClient(c.config)
	c.Affiliation = NewAffiliationClient(c.config)
	c.Category = NewCategoryClient(c.config)
	c.DeletedUser = NewDeletedUserClient(c.config)
	c.FCMToken = NewFCMTokenClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.InviteCode = NewInviteCodeClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.StudyLog = NewStudyLogClient(c.config)
	c.Subject = NewSubjectClient(c.config)
	c.Timer = NewTimerClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		APNsToken:   NewAPNsTokenClient(cfg),
		Affiliation: NewAffiliationClient(cfg),
		Category:    NewCategoryClient(cfg),
		DeletedUser: NewDeletedUserClient(cfg),
		FCMToken:    NewFCMTokenClient(cfg),
		Group:       NewGroupClient(cfg),
		InviteCode:  NewInviteCodeClient(cfg),
		Session:     NewSessionClient(cfg),
		StudyLog:    NewStudyLogClient(cfg),
		Subject:     NewSubjectClient(cfg),
		Timer:       NewTimerClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		APNsToken:   NewAPNsTokenClient(cfg),
		Affiliation: NewAffiliationClient(cfg),
		Category:    NewCategoryClient(cfg),
		DeletedUser: NewDeletedUserClient(cfg),
		FCMToken:    NewFCMTokenClient(cfg),
		Group:       NewGroupClient(cfg),
		InviteCode:  NewInviteCodeClient(cfg),
		Session:     NewSessionClient(cfg),
		StudyLog:    NewStudyLogClient(cfg),
		Subject:     NewSubjectClient(cfg),
		Timer:       NewTimerClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		APNsToken.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.APNsToken, c.Affiliation, c.Category, c.DeletedUser, c.FCMToken, c.Group,
		c.InviteCode, c.Session, c.StudyLog, c.Subject, c.Timer, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.APNsToken, c.Affiliation, c.Category, c.DeletedUser, c.FCMToken, c.Group,
		c.InviteCode, c.Session, c.StudyLog, c.Subject, c.Timer, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *APNsTokenMutation:
		return c.APNsToken.mutate(ctx, m)
	case *AffiliationMutation:
		return c.Affiliation.mutate(ctx, m)
	case *CategoryMutation:
		return c.Category.mutate(ctx, m)
	case *DeletedUserMutation:
		return c.DeletedUser.mutate(ctx, m)
	case *FCMTokenMutation:
		return c.FCMToken.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *InviteCodeMutation:
		return c.InviteCode.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *StudyLogMutation:
		return c.StudyLog.mutate(ctx, m)
	case *SubjectMutation:
		return c.Subject.mutate(ctx, m)
	case *TimerMutation:
		return c.Timer.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// APNsTokenClient is a client for the APNsToken schema.
type APNsTokenClient struct {
	config
}

// NewAPNsTokenClient returns a client for the APNsToken from the given config.
func NewAPNsTokenClient(c config) *APNsTokenClient {
	return &APNsTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `apnstoken.Hooks(f(g(h())))`.
func (c *APNsTokenClient) Use(hooks ...Hook) {
	c.hooks.APNsToken = append(c.hooks.APNsToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `apnstoken.Intercept(f(g(h())))`.
func (c *APNsTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.APNsToken = append(c.inters.APNsToken, interceptors...)
}

// Create returns a builder for creating a APNsToken entity.
func (c *APNsTokenClient) Create() *APNsTokenCreate {
	mutation := newAPNsTokenMutation(c.config, OpCreate)
	return &APNsTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of APNsToken entities.
func (c *APNsTokenClient) CreateBulk(builders ...*APNsTokenCreate) *APNsTokenCreateBulk {
	return &APNsTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *APNsTokenClient) MapCreateBulk(slice any, setFunc func(*APNsTokenCreate, int)) *APNsTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &APNsTokenCreateBulk{err: fmt.Errorf("calling to APNsTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*APNsTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &APNsTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for APNsToken.
func (c *APNsTokenClient) Update() *APNsTokenUpdate {
	mutation := newAPNsTokenMutation(c.config, OpUpdate)
	return &APNsTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *APNsTokenClient) UpdateOne(ant *APNsToken) *APNsTokenUpdateOne {
	mutation := newAPNsTokenMutation(c.config, OpUpdateOne, withAPNsToken(ant))
	return &APNsTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *APNsTokenClient) UpdateOneID(id int) *APNsTokenUpdateOne {
	mutation := newAPNsTokenMutation(c.config, OpUpdateOne, withAPNsTokenID(id))
	return &APNsTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for APNsToken.
func (c *APNsTokenClient) Delete() *APNsTokenDelete {
	mutation := newAPNsTokenMutation(c.config, OpDelete)
	return &APNsTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *APNsTokenClient) DeleteOne(ant *APNsToken) *APNsTokenDeleteOne {
	return c.DeleteOneID(ant.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *APNsTokenClient) DeleteOneID(id int) *APNsTokenDeleteOne {
	builder := c.Delete().Where(apnstoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &APNsTokenDeleteOne{builder}
}

// Query returns a query builder for APNsToken.
func (c *APNsTokenClient) Query() *APNsTokenQuery {
	return &APNsTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAPNsToken},
		inters: c.Interceptors(),
	}
}

// Get returns a APNsToken entity by its id.
func (c *APNsTokenClient) Get(ctx context.Context, id int) (*APNsToken, error) {
	return c.Query().Where(apnstoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *APNsTokenClient) GetX(ctx context.Context, id int) *APNsToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a APNsToken.
func (c *APNsTokenClient) QuerySession(ant *APNsToken) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ant.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(apnstoken.Table, apnstoken.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, apnstoken.SessionTable, apnstoken.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(ant.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *APNsTokenClient) Hooks() []Hook {
	return c.hooks.APNsToken
}

// Interceptors returns the client interceptors.
func (c *APNsTokenClient) Interceptors() []Interceptor {
	return c.inters.APNsToken
}

func (c *APNsTokenClient) mutate(ctx context.Context, m *APNsTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&APNsTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&APNsTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&APNsTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&APNsTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown APNsToken mutation op: %q", m.Op())
	}
}

// AffiliationClient is a client for the Affiliation schema.
type AffiliationClient struct {
	config
}

// NewAffiliationClient returns a client for the Affiliation from the given config.
func NewAffiliationClient(c config) *AffiliationClient {
	return &AffiliationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `affiliation.Hooks(f(g(h())))`.
func (c *AffiliationClient) Use(hooks ...Hook) {
	c.hooks.Affiliation = append(c.hooks.Affiliation, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `affiliation.Intercept(f(g(h())))`.
func (c *AffiliationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Affiliation = append(c.inters.Affiliation, interceptors...)
}

// Create returns a builder for creating a Affiliation entity.
func (c *AffiliationClient) Create() *AffiliationCreate {
	mutation := newAffiliationMutation(c.config, OpCreate)
	return &AffiliationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Affiliation entities.
func (c *AffiliationClient) CreateBulk(builders ...*AffiliationCreate) *AffiliationCreateBulk {
	return &AffiliationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AffiliationClient) MapCreateBulk(slice any, setFunc func(*AffiliationCreate, int)) *AffiliationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AffiliationCreateBulk{err: fmt.Errorf("calling to AffiliationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AffiliationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AffiliationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Affiliation.
func (c *AffiliationClient) Update() *AffiliationUpdate {
	mutation := newAffiliationMutation(c.config, OpUpdate)
	return &AffiliationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AffiliationClient) UpdateOne(a *Affiliation) *AffiliationUpdateOne {
	mutation := newAffiliationMutation(c.config, OpUpdateOne)
	mutation.user = &a.UserID
	mutation.group = &a.GroupID
	return &AffiliationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Affiliation.
func (c *AffiliationClient) Delete() *AffiliationDelete {
	mutation := newAffiliationMutation(c.config, OpDelete)
	return &AffiliationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for Affiliation.
func (c *AffiliationClient) Query() *AffiliationQuery {
	return &AffiliationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAffiliation},
		inters: c.Interceptors(),
	}
}

// QueryUser queries the user edge of a Affiliation.
func (c *AffiliationClient) QueryUser(a *Affiliation) *UserQuery {
	return c.Query().
		Where(affiliation.UserID(a.UserID), affiliation.GroupID(a.GroupID)).
		QueryUser()
}

// QueryGroup queries the group edge of a Affiliation.
func (c *AffiliationClient) QueryGroup(a *Affiliation) *GroupQuery {
	return c.Query().
		Where(affiliation.UserID(a.UserID), affiliation.GroupID(a.GroupID)).
		QueryGroup()
}

// Hooks returns the client hooks.
func (c *AffiliationClient) Hooks() []Hook {
	return c.hooks.Affiliation
}

// Interceptors returns the client interceptors.
func (c *AffiliationClient) Interceptors() []Interceptor {
	return c.inters.Affiliation
}

func (c *AffiliationClient) mutate(ctx context.Context, m *AffiliationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AffiliationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AffiliationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AffiliationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AffiliationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Affiliation mutation op: %q", m.Op())
	}
}

// CategoryClient is a client for the Category schema.
type CategoryClient struct {
	config
}

// NewCategoryClient returns a client for the Category from the given config.
func NewCategoryClient(c config) *CategoryClient {
	return &CategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `category.Hooks(f(g(h())))`.
func (c *CategoryClient) Use(hooks ...Hook) {
	c.hooks.Category = append(c.hooks.Category, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `category.Intercept(f(g(h())))`.
func (c *CategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.Category = append(c.inters.Category, interceptors...)
}

// Create returns a builder for creating a Category entity.
func (c *CategoryClient) Create() *CategoryCreate {
	mutation := newCategoryMutation(c.config, OpCreate)
	return &CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Category entities.
func (c *CategoryClient) CreateBulk(builders ...*CategoryCreate) *CategoryCreateBulk {
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *CategoryClient) MapCreateBulk(slice any, setFunc func(*CategoryCreate, int)) *CategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &CategoryCreateBulk{err: fmt.Errorf("calling to CategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*CategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &CategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Category.
func (c *CategoryClient) Update() *CategoryUpdate {
	mutation := newCategoryMutation(c.config, OpUpdate)
	return &CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CategoryClient) UpdateOne(ca *Category) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategory(ca))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CategoryClient) UpdateOneID(id uuid.UUID) *CategoryUpdateOne {
	mutation := newCategoryMutation(c.config, OpUpdateOne, withCategoryID(id))
	return &CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Category.
func (c *CategoryClient) Delete() *CategoryDelete {
	mutation := newCategoryMutation(c.config, OpDelete)
	return &CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CategoryClient) DeleteOne(ca *Category) *CategoryDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CategoryClient) DeleteOneID(id uuid.UUID) *CategoryDeleteOne {
	builder := c.Delete().Where(category.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CategoryDeleteOne{builder}
}

// Query returns a query builder for Category.
func (c *CategoryClient) Query() *CategoryQuery {
	return &CategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a Category entity by its id.
func (c *CategoryClient) Get(ctx context.Context, id uuid.UUID) (*Category, error) {
	return c.Query().Where(category.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CategoryClient) GetX(ctx context.Context, id uuid.UUID) *Category {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Category.
func (c *CategoryClient) QueryUser(ca *Category) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, category.UserTable, category.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubjects queries the subjects edge of a Category.
func (c *CategoryClient) QuerySubjects(ca *Category) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(category.Table, category.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, category.SubjectsTable, category.SubjectsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CategoryClient) Hooks() []Hook {
	return c.hooks.Category
}

// Interceptors returns the client interceptors.
func (c *CategoryClient) Interceptors() []Interceptor {
	return c.inters.Category
}

func (c *CategoryClient) mutate(ctx context.Context, m *CategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Category mutation op: %q", m.Op())
	}
}

// DeletedUserClient is a client for the DeletedUser schema.
type DeletedUserClient struct {
	config
}

// NewDeletedUserClient returns a client for the DeletedUser from the given config.
func NewDeletedUserClient(c config) *DeletedUserClient {
	return &DeletedUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `deleteduser.Hooks(f(g(h())))`.
func (c *DeletedUserClient) Use(hooks ...Hook) {
	c.hooks.DeletedUser = append(c.hooks.DeletedUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `deleteduser.Intercept(f(g(h())))`.
func (c *DeletedUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.DeletedUser = append(c.inters.DeletedUser, interceptors...)
}

// Create returns a builder for creating a DeletedUser entity.
func (c *DeletedUserClient) Create() *DeletedUserCreate {
	mutation := newDeletedUserMutation(c.config, OpCreate)
	return &DeletedUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DeletedUser entities.
func (c *DeletedUserClient) CreateBulk(builders ...*DeletedUserCreate) *DeletedUserCreateBulk {
	return &DeletedUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DeletedUserClient) MapCreateBulk(slice any, setFunc func(*DeletedUserCreate, int)) *DeletedUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DeletedUserCreateBulk{err: fmt.Errorf("calling to DeletedUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DeletedUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DeletedUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DeletedUser.
func (c *DeletedUserClient) Update() *DeletedUserUpdate {
	mutation := newDeletedUserMutation(c.config, OpUpdate)
	return &DeletedUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DeletedUserClient) UpdateOne(du *DeletedUser) *DeletedUserUpdateOne {
	mutation := newDeletedUserMutation(c.config, OpUpdateOne, withDeletedUser(du))
	return &DeletedUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DeletedUserClient) UpdateOneID(id uuid.UUID) *DeletedUserUpdateOne {
	mutation := newDeletedUserMutation(c.config, OpUpdateOne, withDeletedUserID(id))
	return &DeletedUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DeletedUser.
func (c *DeletedUserClient) Delete() *DeletedUserDelete {
	mutation := newDeletedUserMutation(c.config, OpDelete)
	return &DeletedUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DeletedUserClient) DeleteOne(du *DeletedUser) *DeletedUserDeleteOne {
	return c.DeleteOneID(du.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DeletedUserClient) DeleteOneID(id uuid.UUID) *DeletedUserDeleteOne {
	builder := c.Delete().Where(deleteduser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DeletedUserDeleteOne{builder}
}

// Query returns a query builder for DeletedUser.
func (c *DeletedUserClient) Query() *DeletedUserQuery {
	return &DeletedUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDeletedUser},
		inters: c.Interceptors(),
	}
}

// Get returns a DeletedUser entity by its id.
func (c *DeletedUserClient) Get(ctx context.Context, id uuid.UUID) (*DeletedUser, error) {
	return c.Query().Where(deleteduser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DeletedUserClient) GetX(ctx context.Context, id uuid.UUID) *DeletedUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DeletedUserClient) Hooks() []Hook {
	return c.hooks.DeletedUser
}

// Interceptors returns the client interceptors.
func (c *DeletedUserClient) Interceptors() []Interceptor {
	return c.inters.DeletedUser
}

func (c *DeletedUserClient) mutate(ctx context.Context, m *DeletedUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DeletedUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DeletedUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DeletedUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DeletedUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DeletedUser mutation op: %q", m.Op())
	}
}

// FCMTokenClient is a client for the FCMToken schema.
type FCMTokenClient struct {
	config
}

// NewFCMTokenClient returns a client for the FCMToken from the given config.
func NewFCMTokenClient(c config) *FCMTokenClient {
	return &FCMTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fcmtoken.Hooks(f(g(h())))`.
func (c *FCMTokenClient) Use(hooks ...Hook) {
	c.hooks.FCMToken = append(c.hooks.FCMToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fcmtoken.Intercept(f(g(h())))`.
func (c *FCMTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.FCMToken = append(c.inters.FCMToken, interceptors...)
}

// Create returns a builder for creating a FCMToken entity.
func (c *FCMTokenClient) Create() *FCMTokenCreate {
	mutation := newFCMTokenMutation(c.config, OpCreate)
	return &FCMTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FCMToken entities.
func (c *FCMTokenClient) CreateBulk(builders ...*FCMTokenCreate) *FCMTokenCreateBulk {
	return &FCMTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FCMTokenClient) MapCreateBulk(slice any, setFunc func(*FCMTokenCreate, int)) *FCMTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FCMTokenCreateBulk{err: fmt.Errorf("calling to FCMTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FCMTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FCMTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FCMToken.
func (c *FCMTokenClient) Update() *FCMTokenUpdate {
	mutation := newFCMTokenMutation(c.config, OpUpdate)
	return &FCMTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FCMTokenClient) UpdateOne(ft *FCMToken) *FCMTokenUpdateOne {
	mutation := newFCMTokenMutation(c.config, OpUpdateOne, withFCMToken(ft))
	return &FCMTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FCMTokenClient) UpdateOneID(id int) *FCMTokenUpdateOne {
	mutation := newFCMTokenMutation(c.config, OpUpdateOne, withFCMTokenID(id))
	return &FCMTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FCMToken.
func (c *FCMTokenClient) Delete() *FCMTokenDelete {
	mutation := newFCMTokenMutation(c.config, OpDelete)
	return &FCMTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FCMTokenClient) DeleteOne(ft *FCMToken) *FCMTokenDeleteOne {
	return c.DeleteOneID(ft.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FCMTokenClient) DeleteOneID(id int) *FCMTokenDeleteOne {
	builder := c.Delete().Where(fcmtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FCMTokenDeleteOne{builder}
}

// Query returns a query builder for FCMToken.
func (c *FCMTokenClient) Query() *FCMTokenQuery {
	return &FCMTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFCMToken},
		inters: c.Interceptors(),
	}
}

// Get returns a FCMToken entity by its id.
func (c *FCMTokenClient) Get(ctx context.Context, id int) (*FCMToken, error) {
	return c.Query().Where(fcmtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FCMTokenClient) GetX(ctx context.Context, id int) *FCMToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySession queries the session edge of a FCMToken.
func (c *FCMTokenClient) QuerySession(ft *FCMToken) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ft.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fcmtoken.Table, fcmtoken.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, fcmtoken.SessionTable, fcmtoken.SessionColumn),
		)
		fromV = sqlgraph.Neighbors(ft.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FCMTokenClient) Hooks() []Hook {
	return c.hooks.FCMToken
}

// Interceptors returns the client interceptors.
func (c *FCMTokenClient) Interceptors() []Interceptor {
	return c.inters.FCMToken
}

func (c *FCMTokenClient) mutate(ctx context.Context, m *FCMTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FCMTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FCMTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FCMTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FCMTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FCMToken mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id uuid.UUID) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id uuid.UUID) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id uuid.UUID) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id uuid.UUID) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMembers queries the members edge of a Group.
func (c *GroupClient) QueryMembers(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.MembersTable, group.MembersPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Group.
func (c *GroupClient) QueryOwner(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, group.OwnerTable, group.OwnerColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySharedStudyLogs queries the shared_study_logs edge of a Group.
func (c *GroupClient) QuerySharedStudyLogs(gr *Group) *StudyLogQuery {
	query := (&StudyLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(studylog.Table, studylog.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.SharedStudyLogsTable, group.SharedStudyLogsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySharedTimer queries the shared_timer edge of a Group.
func (c *GroupClient) QuerySharedTimer(gr *Group) *TimerQuery {
	query := (&TimerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(timer.Table, timer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, group.SharedTimerTable, group.SharedTimerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInviteCodes queries the invite_codes edge of a Group.
func (c *GroupClient) QueryInviteCodes(gr *Group) *InviteCodeQuery {
	query := (&InviteCodeClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(invitecode.Table, invitecode.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, group.InviteCodesTable, group.InviteCodesColumn),
		)
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	return c.hooks.Group
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	return c.inters.Group
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Group mutation op: %q", m.Op())
	}
}

// InviteCodeClient is a client for the InviteCode schema.
type InviteCodeClient struct {
	config
}

// NewInviteCodeClient returns a client for the InviteCode from the given config.
func NewInviteCodeClient(c config) *InviteCodeClient {
	return &InviteCodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `invitecode.Hooks(f(g(h())))`.
func (c *InviteCodeClient) Use(hooks ...Hook) {
	c.hooks.InviteCode = append(c.hooks.InviteCode, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `invitecode.Intercept(f(g(h())))`.
func (c *InviteCodeClient) Intercept(interceptors ...Interceptor) {
	c.inters.InviteCode = append(c.inters.InviteCode, interceptors...)
}

// Create returns a builder for creating a InviteCode entity.
func (c *InviteCodeClient) Create() *InviteCodeCreate {
	mutation := newInviteCodeMutation(c.config, OpCreate)
	return &InviteCodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InviteCode entities.
func (c *InviteCodeClient) CreateBulk(builders ...*InviteCodeCreate) *InviteCodeCreateBulk {
	return &InviteCodeCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InviteCodeClient) MapCreateBulk(slice any, setFunc func(*InviteCodeCreate, int)) *InviteCodeCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InviteCodeCreateBulk{err: fmt.Errorf("calling to InviteCodeClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InviteCodeCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InviteCodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InviteCode.
func (c *InviteCodeClient) Update() *InviteCodeUpdate {
	mutation := newInviteCodeMutation(c.config, OpUpdate)
	return &InviteCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InviteCodeClient) UpdateOne(ic *InviteCode) *InviteCodeUpdateOne {
	mutation := newInviteCodeMutation(c.config, OpUpdateOne, withInviteCode(ic))
	return &InviteCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InviteCodeClient) UpdateOneID(id int) *InviteCodeUpdateOne {
	mutation := newInviteCodeMutation(c.config, OpUpdateOne, withInviteCodeID(id))
	return &InviteCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InviteCode.
func (c *InviteCodeClient) Delete() *InviteCodeDelete {
	mutation := newInviteCodeMutation(c.config, OpDelete)
	return &InviteCodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InviteCodeClient) DeleteOne(ic *InviteCode) *InviteCodeDeleteOne {
	return c.DeleteOneID(ic.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InviteCodeClient) DeleteOneID(id int) *InviteCodeDeleteOne {
	builder := c.Delete().Where(invitecode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InviteCodeDeleteOne{builder}
}

// Query returns a query builder for InviteCode.
func (c *InviteCodeClient) Query() *InviteCodeQuery {
	return &InviteCodeQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInviteCode},
		inters: c.Interceptors(),
	}
}

// Get returns a InviteCode entity by its id.
func (c *InviteCodeClient) Get(ctx context.Context, id int) (*InviteCode, error) {
	return c.Query().Where(invitecode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InviteCodeClient) GetX(ctx context.Context, id int) *InviteCode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a InviteCode.
func (c *InviteCodeClient) QueryGroup(ic *InviteCode) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ic.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(invitecode.Table, invitecode.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, invitecode.GroupTable, invitecode.GroupColumn),
		)
		fromV = sqlgraph.Neighbors(ic.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InviteCodeClient) Hooks() []Hook {
	return c.hooks.InviteCode
}

// Interceptors returns the client interceptors.
func (c *InviteCodeClient) Interceptors() []Interceptor {
	return c.inters.InviteCode
}

func (c *InviteCodeClient) mutate(ctx context.Context, m *InviteCodeMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InviteCodeCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InviteCodeUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InviteCodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InviteCodeDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InviteCode mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id uuid.UUID) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id uuid.UUID) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id uuid.UUID) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id uuid.UUID) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Session.
func (c *SessionClient) QueryUser(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.UserTable, session.UserColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryApnsToken queries the apns_token edge of a Session.
func (c *SessionClient) QueryApnsToken(s *Session) *APNsTokenQuery {
	query := (&APNsTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(apnstoken.Table, apnstoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, session.ApnsTokenTable, session.ApnsTokenColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFcmToken queries the fcm_token edge of a Session.
func (c *SessionClient) QueryFcmToken(s *Session) *FCMTokenQuery {
	query := (&FCMTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(fcmtoken.Table, fcmtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, session.FcmTokenTable, session.FcmTokenColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	return c.hooks.Session
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Session mutation op: %q", m.Op())
	}
}

// StudyLogClient is a client for the StudyLog schema.
type StudyLogClient struct {
	config
}

// NewStudyLogClient returns a client for the StudyLog from the given config.
func NewStudyLogClient(c config) *StudyLogClient {
	return &StudyLogClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `studylog.Hooks(f(g(h())))`.
func (c *StudyLogClient) Use(hooks ...Hook) {
	c.hooks.StudyLog = append(c.hooks.StudyLog, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `studylog.Intercept(f(g(h())))`.
func (c *StudyLogClient) Intercept(interceptors ...Interceptor) {
	c.inters.StudyLog = append(c.inters.StudyLog, interceptors...)
}

// Create returns a builder for creating a StudyLog entity.
func (c *StudyLogClient) Create() *StudyLogCreate {
	mutation := newStudyLogMutation(c.config, OpCreate)
	return &StudyLogCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of StudyLog entities.
func (c *StudyLogClient) CreateBulk(builders ...*StudyLogCreate) *StudyLogCreateBulk {
	return &StudyLogCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StudyLogClient) MapCreateBulk(slice any, setFunc func(*StudyLogCreate, int)) *StudyLogCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StudyLogCreateBulk{err: fmt.Errorf("calling to StudyLogClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StudyLogCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StudyLogCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for StudyLog.
func (c *StudyLogClient) Update() *StudyLogUpdate {
	mutation := newStudyLogMutation(c.config, OpUpdate)
	return &StudyLogUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StudyLogClient) UpdateOne(sl *StudyLog) *StudyLogUpdateOne {
	mutation := newStudyLogMutation(c.config, OpUpdateOne, withStudyLog(sl))
	return &StudyLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StudyLogClient) UpdateOneID(id uuid.UUID) *StudyLogUpdateOne {
	mutation := newStudyLogMutation(c.config, OpUpdateOne, withStudyLogID(id))
	return &StudyLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for StudyLog.
func (c *StudyLogClient) Delete() *StudyLogDelete {
	mutation := newStudyLogMutation(c.config, OpDelete)
	return &StudyLogDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StudyLogClient) DeleteOne(sl *StudyLog) *StudyLogDeleteOne {
	return c.DeleteOneID(sl.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StudyLogClient) DeleteOneID(id uuid.UUID) *StudyLogDeleteOne {
	builder := c.Delete().Where(studylog.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StudyLogDeleteOne{builder}
}

// Query returns a query builder for StudyLog.
func (c *StudyLogClient) Query() *StudyLogQuery {
	return &StudyLogQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStudyLog},
		inters: c.Interceptors(),
	}
}

// Get returns a StudyLog entity by its id.
func (c *StudyLogClient) Get(ctx context.Context, id uuid.UUID) (*StudyLog, error) {
	return c.Query().Where(studylog.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StudyLogClient) GetX(ctx context.Context, id uuid.UUID) *StudyLog {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a StudyLog.
func (c *StudyLogClient) QueryUser(sl *StudyLog) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studylog.Table, studylog.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studylog.UserTable, studylog.UserColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubject queries the subject edge of a StudyLog.
func (c *StudyLogClient) QuerySubject(sl *StudyLog) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studylog.Table, studylog.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, studylog.SubjectTable, studylog.SubjectColumn),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySharedGroup queries the shared_group edge of a StudyLog.
func (c *StudyLogClient) QuerySharedGroup(sl *StudyLog) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sl.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(studylog.Table, studylog.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, studylog.SharedGroupTable, studylog.SharedGroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sl.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StudyLogClient) Hooks() []Hook {
	return c.hooks.StudyLog
}

// Interceptors returns the client interceptors.
func (c *StudyLogClient) Interceptors() []Interceptor {
	return c.inters.StudyLog
}

func (c *StudyLogClient) mutate(ctx context.Context, m *StudyLogMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StudyLogCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StudyLogUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StudyLogUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StudyLogDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown StudyLog mutation op: %q", m.Op())
	}
}

// SubjectClient is a client for the Subject schema.
type SubjectClient struct {
	config
}

// NewSubjectClient returns a client for the Subject from the given config.
func NewSubjectClient(c config) *SubjectClient {
	return &SubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subject.Hooks(f(g(h())))`.
func (c *SubjectClient) Use(hooks ...Hook) {
	c.hooks.Subject = append(c.hooks.Subject, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subject.Intercept(f(g(h())))`.
func (c *SubjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Subject = append(c.inters.Subject, interceptors...)
}

// Create returns a builder for creating a Subject entity.
func (c *SubjectClient) Create() *SubjectCreate {
	mutation := newSubjectMutation(c.config, OpCreate)
	return &SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subject entities.
func (c *SubjectClient) CreateBulk(builders ...*SubjectCreate) *SubjectCreateBulk {
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SubjectClient) MapCreateBulk(slice any, setFunc func(*SubjectCreate, int)) *SubjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SubjectCreateBulk{err: fmt.Errorf("calling to SubjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SubjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subject.
func (c *SubjectClient) Update() *SubjectUpdate {
	mutation := newSubjectMutation(c.config, OpUpdate)
	return &SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectClient) UpdateOne(s *Subject) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubject(s))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectClient) UpdateOneID(id uuid.UUID) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubjectID(id))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subject.
func (c *SubjectClient) Delete() *SubjectDelete {
	mutation := newSubjectMutation(c.config, OpDelete)
	return &SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubjectClient) DeleteOne(s *Subject) *SubjectDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubjectClient) DeleteOneID(id uuid.UUID) *SubjectDeleteOne {
	builder := c.Delete().Where(subject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectDeleteOne{builder}
}

// Query returns a query builder for Subject.
func (c *SubjectClient) Query() *SubjectQuery {
	return &SubjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubject},
		inters: c.Interceptors(),
	}
}

// Get returns a Subject entity by its id.
func (c *SubjectClient) Get(ctx context.Context, id uuid.UUID) (*Subject, error) {
	return c.Query().Where(subject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectClient) GetX(ctx context.Context, id uuid.UUID) *Subject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a Subject.
func (c *SubjectClient) QueryCategory(s *Subject) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subject.CategoryTable, subject.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudyLogs queries the study_logs edge of a Subject.
func (c *SubjectClient) QueryStudyLogs(s *Subject) *StudyLogQuery {
	query := (&StudyLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(studylog.Table, studylog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subject.StudyLogsTable, subject.StudyLogsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTimers queries the timers edge of a Subject.
func (c *SubjectClient) QueryTimers(s *Subject) *TimerQuery {
	query := (&TimerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(timer.Table, timer.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subject.TimersTable, subject.TimersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectClient) Hooks() []Hook {
	return c.hooks.Subject
}

// Interceptors returns the client interceptors.
func (c *SubjectClient) Interceptors() []Interceptor {
	return c.inters.Subject
}

func (c *SubjectClient) mutate(ctx context.Context, m *SubjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Subject mutation op: %q", m.Op())
	}
}

// TimerClient is a client for the Timer schema.
type TimerClient struct {
	config
}

// NewTimerClient returns a client for the Timer from the given config.
func NewTimerClient(c config) *TimerClient {
	return &TimerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `timer.Hooks(f(g(h())))`.
func (c *TimerClient) Use(hooks ...Hook) {
	c.hooks.Timer = append(c.hooks.Timer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `timer.Intercept(f(g(h())))`.
func (c *TimerClient) Intercept(interceptors ...Interceptor) {
	c.inters.Timer = append(c.inters.Timer, interceptors...)
}

// Create returns a builder for creating a Timer entity.
func (c *TimerClient) Create() *TimerCreate {
	mutation := newTimerMutation(c.config, OpCreate)
	return &TimerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Timer entities.
func (c *TimerClient) CreateBulk(builders ...*TimerCreate) *TimerCreateBulk {
	return &TimerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *TimerClient) MapCreateBulk(slice any, setFunc func(*TimerCreate, int)) *TimerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &TimerCreateBulk{err: fmt.Errorf("calling to TimerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*TimerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &TimerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Timer.
func (c *TimerClient) Update() *TimerUpdate {
	mutation := newTimerMutation(c.config, OpUpdate)
	return &TimerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TimerClient) UpdateOne(t *Timer) *TimerUpdateOne {
	mutation := newTimerMutation(c.config, OpUpdateOne, withTimer(t))
	return &TimerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TimerClient) UpdateOneID(id uuid.UUID) *TimerUpdateOne {
	mutation := newTimerMutation(c.config, OpUpdateOne, withTimerID(id))
	return &TimerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Timer.
func (c *TimerClient) Delete() *TimerDelete {
	mutation := newTimerMutation(c.config, OpDelete)
	return &TimerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TimerClient) DeleteOne(t *Timer) *TimerDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TimerClient) DeleteOneID(id uuid.UUID) *TimerDeleteOne {
	builder := c.Delete().Where(timer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TimerDeleteOne{builder}
}

// Query returns a query builder for Timer.
func (c *TimerClient) Query() *TimerQuery {
	return &TimerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeTimer},
		inters: c.Interceptors(),
	}
}

// Get returns a Timer entity by its id.
func (c *TimerClient) Get(ctx context.Context, id uuid.UUID) (*Timer, error) {
	return c.Query().Where(timer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TimerClient) GetX(ctx context.Context, id uuid.UUID) *Timer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Timer.
func (c *TimerClient) QueryUser(t *Timer) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(timer.Table, timer.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, timer.UserTable, timer.UserColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubject queries the subject edge of a Timer.
func (c *TimerClient) QuerySubject(t *Timer) *SubjectQuery {
	query := (&SubjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(timer.Table, timer.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, timer.SubjectTable, timer.SubjectColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySharedGroup queries the shared_group edge of a Timer.
func (c *TimerClient) QuerySharedGroup(t *Timer) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(timer.Table, timer.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, timer.SharedGroupTable, timer.SharedGroupPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TimerClient) Hooks() []Hook {
	return c.hooks.Timer
}

// Interceptors returns the client interceptors.
func (c *TimerClient) Interceptors() []Interceptor {
	return c.inters.Timer
}

func (c *TimerClient) mutate(ctx context.Context, m *TimerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&TimerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&TimerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&TimerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&TimerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Timer mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id uuid.UUID) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id uuid.UUID) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id uuid.UUID) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id uuid.UUID) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJoinedGroups queries the joined_groups edge of a User.
func (c *UserClient) QueryJoinedGroups(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.JoinedGroupsTable, user.JoinedGroupsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnedGroups queries the owned_groups edge of a User.
func (c *UserClient) QueryOwnedGroups(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OwnedGroupsTable, user.OwnedGroupsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryStudyLogs queries the study_logs edge of a User.
func (c *UserClient) QueryStudyLogs(u *User) *StudyLogQuery {
	query := (&StudyLogClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(studylog.Table, studylog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.StudyLogsTable, user.StudyLogsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTimers queries the timers edge of a User.
func (c *UserClient) QueryTimers(u *User) *TimerQuery {
	query := (&TimerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(timer.Table, timer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.TimersTable, user.TimersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwnedCategories queries the owned_categories edge of a User.
func (c *UserClient) QueryOwnedCategories(u *User) *CategoryQuery {
	query := (&CategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(category.Table, category.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OwnedCategoriesTable, user.OwnedCategoriesColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAffiliations queries the affiliations edge of a User.
func (c *UserClient) QueryAffiliations(u *User) *AffiliationQuery {
	query := (&AffiliationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(affiliation.Table, affiliation.UserColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, user.AffiliationsTable, user.AffiliationsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		APNsToken, Affiliation, Category, DeletedUser, FCMToken, Group, InviteCode,
		Session, StudyLog, Subject, Timer, User []ent.Hook
	}
	inters struct {
		APNsToken, Affiliation, Category, DeletedUser, FCMToken, Group, InviteCode,
		Session, StudyLog, Subject, Timer, User []ent.Interceptor
	}
)

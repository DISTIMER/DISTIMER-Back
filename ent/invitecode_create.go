// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/invitecode"
)

// InviteCodeCreate is the builder for creating a InviteCode entity.
type InviteCodeCreate struct {
	config
	mutation *InviteCodeMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (icc *InviteCodeCreate) SetCode(s string) *InviteCodeCreate {
	icc.mutation.SetCode(s)
	return icc
}

// SetUsed sets the "used" field.
func (icc *InviteCodeCreate) SetUsed(b bool) *InviteCodeCreate {
	icc.mutation.SetUsed(b)
	return icc
}

// SetNillableUsed sets the "used" field if the given value is not nil.
func (icc *InviteCodeCreate) SetNillableUsed(b *bool) *InviteCodeCreate {
	if b != nil {
		icc.SetUsed(*b)
	}
	return icc
}

// SetGroupID sets the "group" edge to the Group entity by ID.
func (icc *InviteCodeCreate) SetGroupID(id uuid.UUID) *InviteCodeCreate {
	icc.mutation.SetGroupID(id)
	return icc
}

// SetGroup sets the "group" edge to the Group entity.
func (icc *InviteCodeCreate) SetGroup(g *Group) *InviteCodeCreate {
	return icc.SetGroupID(g.ID)
}

// Mutation returns the InviteCodeMutation object of the builder.
func (icc *InviteCodeCreate) Mutation() *InviteCodeMutation {
	return icc.mutation
}

// Save creates the InviteCode in the database.
func (icc *InviteCodeCreate) Save(ctx context.Context) (*InviteCode, error) {
	icc.defaults()
	return withHooks(ctx, icc.sqlSave, icc.mutation, icc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (icc *InviteCodeCreate) SaveX(ctx context.Context) *InviteCode {
	v, err := icc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icc *InviteCodeCreate) Exec(ctx context.Context) error {
	_, err := icc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icc *InviteCodeCreate) ExecX(ctx context.Context) {
	if err := icc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (icc *InviteCodeCreate) defaults() {
	if _, ok := icc.mutation.Used(); !ok {
		v := invitecode.DefaultUsed
		icc.mutation.SetUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (icc *InviteCodeCreate) check() error {
	if _, ok := icc.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "InviteCode.code"`)}
	}
	if _, ok := icc.mutation.Used(); !ok {
		return &ValidationError{Name: "used", err: errors.New(`ent: missing required field "InviteCode.used"`)}
	}
	if _, ok := icc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "InviteCode.group"`)}
	}
	return nil
}

func (icc *InviteCodeCreate) sqlSave(ctx context.Context) (*InviteCode, error) {
	if err := icc.check(); err != nil {
		return nil, err
	}
	_node, _spec := icc.createSpec()
	if err := sqlgraph.CreateNode(ctx, icc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	icc.mutation.id = &_node.ID
	icc.mutation.done = true
	return _node, nil
}

func (icc *InviteCodeCreate) createSpec() (*InviteCode, *sqlgraph.CreateSpec) {
	var (
		_node = &InviteCode{config: icc.config}
		_spec = sqlgraph.NewCreateSpec(invitecode.Table, sqlgraph.NewFieldSpec(invitecode.FieldID, field.TypeInt))
	)
	if value, ok := icc.mutation.Code(); ok {
		_spec.SetField(invitecode.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := icc.mutation.Used(); ok {
		_spec.SetField(invitecode.FieldUsed, field.TypeBool, value)
		_node.Used = value
	}
	if nodes := icc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invitecode.GroupTable,
			Columns: []string{invitecode.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.group_invite_codes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InviteCodeCreateBulk is the builder for creating many InviteCode entities in bulk.
type InviteCodeCreateBulk struct {
	config
	err      error
	builders []*InviteCodeCreate
}

// Save creates the InviteCode entities in the database.
func (iccb *InviteCodeCreateBulk) Save(ctx context.Context) ([]*InviteCode, error) {
	if iccb.err != nil {
		return nil, iccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iccb.builders))
	nodes := make([]*InviteCode, len(iccb.builders))
	mutators := make([]Mutator, len(iccb.builders))
	for i := range iccb.builders {
		func(i int, root context.Context) {
			builder := iccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InviteCodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iccb *InviteCodeCreateBulk) SaveX(ctx context.Context) []*InviteCode {
	v, err := iccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iccb *InviteCodeCreateBulk) Exec(ctx context.Context) error {
	_, err := iccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iccb *InviteCodeCreateBulk) ExecX(ctx context.Context) {
	if err := iccb.Exec(ctx); err != nil {
		panic(err)
	}
}

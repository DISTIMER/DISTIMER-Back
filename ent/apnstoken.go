// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/apnstoken"
	"pentag.kr/distimer/ent/session"
)

// APNsToken is the model entity for the APNsToken schema.
type APNsToken struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartToken holds the value of the "start_token" field.
	StartToken string `json:"start_token,omitempty"`
	// UpdateToken holds the value of the "update_token" field.
	UpdateToken string `json:"update_token,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the APNsTokenQuery when eager-loading is set.
	Edges              APNsTokenEdges `json:"edges"`
	session_apns_token *uuid.UUID
	selectValues       sql.SelectValues
}

// APNsTokenEdges holds the relations/edges for other nodes in the graph.
type APNsTokenEdges struct {
	// Session holds the value of the session edge.
	Session *Session `json:"session,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SessionOrErr returns the Session value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e APNsTokenEdges) SessionOrErr() (*Session, error) {
	if e.Session != nil {
		return e.Session, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: session.Label}
	}
	return nil, &NotLoadedError{edge: "session"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*APNsToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apnstoken.FieldID:
			values[i] = new(sql.NullInt64)
		case apnstoken.FieldStartToken, apnstoken.FieldUpdateToken:
			values[i] = new(sql.NullString)
		case apnstoken.ForeignKeys[0]: // session_apns_token
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the APNsToken fields.
func (ant *APNsToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apnstoken.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ant.ID = int(value.Int64)
		case apnstoken.FieldStartToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field start_token", values[i])
			} else if value.Valid {
				ant.StartToken = value.String
			}
		case apnstoken.FieldUpdateToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_token", values[i])
			} else if value.Valid {
				ant.UpdateToken = value.String
			}
		case apnstoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field session_apns_token", values[i])
			} else if value.Valid {
				ant.session_apns_token = new(uuid.UUID)
				*ant.session_apns_token = *value.S.(*uuid.UUID)
			}
		default:
			ant.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the APNsToken.
// This includes values selected through modifiers, order, etc.
func (ant *APNsToken) Value(name string) (ent.Value, error) {
	return ant.selectValues.Get(name)
}

// QuerySession queries the "session" edge of the APNsToken entity.
func (ant *APNsToken) QuerySession() *SessionQuery {
	return NewAPNsTokenClient(ant.config).QuerySession(ant)
}

// Update returns a builder for updating this APNsToken.
// Note that you need to call APNsToken.Unwrap() before calling this method if this APNsToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (ant *APNsToken) Update() *APNsTokenUpdateOne {
	return NewAPNsTokenClient(ant.config).UpdateOne(ant)
}

// Unwrap unwraps the APNsToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ant *APNsToken) Unwrap() *APNsToken {
	_tx, ok := ant.config.driver.(*txDriver)
	if !ok {
		panic("ent: APNsToken is not a transactional entity")
	}
	ant.config.driver = _tx.drv
	return ant
}

// String implements the fmt.Stringer.
func (ant *APNsToken) String() string {
	var builder strings.Builder
	builder.WriteString("APNsToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ant.ID))
	builder.WriteString("start_token=")
	builder.WriteString(ant.StartToken)
	builder.WriteString(", ")
	builder.WriteString("update_token=")
	builder.WriteString(ant.UpdateToken)
	builder.WriteByte(')')
	return builder.String()
}

// APNsTokens is a parsable slice of APNsToken.
type APNsTokens []*APNsToken

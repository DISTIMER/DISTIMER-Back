// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/deleteduser"
)

// DeletedUser is the model entity for the DeletedUser schema.
type DeletedUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// OauthID holds the value of the "oauth_id" field.
	OauthID string `json:"oauth_id,omitempty"`
	// OauthProvider holds the value of the "oauth_provider" field.
	OauthProvider int8 `json:"oauth_provider,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt    time.Time `json:"deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeletedUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deleteduser.FieldOauthProvider:
			values[i] = new(sql.NullInt64)
		case deleteduser.FieldName, deleteduser.FieldOauthID:
			values[i] = new(sql.NullString)
		case deleteduser.FieldCreatedAt, deleteduser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		case deleteduser.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeletedUser fields.
func (du *DeletedUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deleteduser.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				du.ID = *value
			}
		case deleteduser.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				du.Name = value.String
			}
		case deleteduser.FieldOauthID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_id", values[i])
			} else if value.Valid {
				du.OauthID = value.String
			}
		case deleteduser.FieldOauthProvider:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field oauth_provider", values[i])
			} else if value.Valid {
				du.OauthProvider = int8(value.Int64)
			}
		case deleteduser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				du.CreatedAt = value.Time
			}
		case deleteduser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				du.DeletedAt = value.Time
			}
		default:
			du.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the DeletedUser.
// This includes values selected through modifiers, order, etc.
func (du *DeletedUser) Value(name string) (ent.Value, error) {
	return du.selectValues.Get(name)
}

// Update returns a builder for updating this DeletedUser.
// Note that you need to call DeletedUser.Unwrap() before calling this method if this DeletedUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (du *DeletedUser) Update() *DeletedUserUpdateOne {
	return NewDeletedUserClient(du.config).UpdateOne(du)
}

// Unwrap unwraps the DeletedUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (du *DeletedUser) Unwrap() *DeletedUser {
	_tx, ok := du.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeletedUser is not a transactional entity")
	}
	du.config.driver = _tx.drv
	return du
}

// String implements the fmt.Stringer.
func (du *DeletedUser) String() string {
	var builder strings.Builder
	builder.WriteString("DeletedUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", du.ID))
	builder.WriteString("name=")
	builder.WriteString(du.Name)
	builder.WriteString(", ")
	builder.WriteString("oauth_id=")
	builder.WriteString(du.OauthID)
	builder.WriteString(", ")
	builder.WriteString("oauth_provider=")
	builder.WriteString(fmt.Sprintf("%v", du.OauthProvider))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(du.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(du.DeletedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// DeletedUsers is a parsable slice of DeletedUser.
type DeletedUsers []*DeletedUser

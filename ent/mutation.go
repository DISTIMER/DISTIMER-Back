// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/affiliation"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/invitecode"
	"pentag.kr/distimer/ent/predicate"
	"pentag.kr/distimer/ent/refreshtoken"
	"pentag.kr/distimer/ent/studylog"
	"pentag.kr/distimer/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAffiliation  = "Affiliation"
	TypeGroup        = "Group"
	TypeInviteCode   = "InviteCode"
	TypeRefreshToken = "RefreshToken"
	TypeStudyLog     = "StudyLog"
	TypeUser         = "User"
)

// AffiliationMutation represents an operation that mutates the Affiliation nodes in the graph.
type AffiliationMutation struct {
	config
	op            Op
	typ           string
	nickname      *string
	role          *int8
	addrole       *int8
	joined_at     *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	group         *uuid.UUID
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*Affiliation, error)
	predicates    []predicate.Affiliation
}

var _ ent.Mutation = (*AffiliationMutation)(nil)

// affiliationOption allows management of the mutation configuration using functional options.
type affiliationOption func(*AffiliationMutation)

// newAffiliationMutation creates new mutation for the Affiliation entity.
func newAffiliationMutation(c config, op Op, opts ...affiliationOption) *AffiliationMutation {
	m := &AffiliationMutation{
		config:        c,
		op:            op,
		typ:           TypeAffiliation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AffiliationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AffiliationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetUserID sets the "user_id" field.
func (m *AffiliationMutation) SetUserID(u uuid.UUID) {
	m.user = &u
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AffiliationMutation) UserID() (r uuid.UUID, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AffiliationMutation) ResetUserID() {
	m.user = nil
}

// SetGroupID sets the "group_id" field.
func (m *AffiliationMutation) SetGroupID(u uuid.UUID) {
	m.group = &u
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *AffiliationMutation) GroupID() (r uuid.UUID, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *AffiliationMutation) ResetGroupID() {
	m.group = nil
}

// SetNickname sets the "nickname" field.
func (m *AffiliationMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *AffiliationMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// ResetNickname resets all changes to the "nickname" field.
func (m *AffiliationMutation) ResetNickname() {
	m.nickname = nil
}

// SetRole sets the "role" field.
func (m *AffiliationMutation) SetRole(i int8) {
	m.role = &i
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *AffiliationMutation) Role() (r int8, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// AddRole adds i to the "role" field.
func (m *AffiliationMutation) AddRole(i int8) {
	if m.addrole != nil {
		*m.addrole += i
	} else {
		m.addrole = &i
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *AffiliationMutation) AddedRole() (r int8, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *AffiliationMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
}

// SetJoinedAt sets the "joined_at" field.
func (m *AffiliationMutation) SetJoinedAt(t time.Time) {
	m.joined_at = &t
}

// JoinedAt returns the value of the "joined_at" field in the mutation.
func (m *AffiliationMutation) JoinedAt() (r time.Time, exists bool) {
	v := m.joined_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetJoinedAt resets all changes to the "joined_at" field.
func (m *AffiliationMutation) ResetJoinedAt() {
	m.joined_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *AffiliationMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[affiliation.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *AffiliationMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *AffiliationMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *AffiliationMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *AffiliationMutation) ClearGroup() {
	m.clearedgroup = true
	m.clearedFields[affiliation.FieldGroupID] = struct{}{}
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *AffiliationMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *AffiliationMutation) GroupIDs() (ids []uuid.UUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *AffiliationMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the AffiliationMutation builder.
func (m *AffiliationMutation) Where(ps ...predicate.Affiliation) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AffiliationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AffiliationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Affiliation, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AffiliationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AffiliationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Affiliation).
func (m *AffiliationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AffiliationMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.user != nil {
		fields = append(fields, affiliation.FieldUserID)
	}
	if m.group != nil {
		fields = append(fields, affiliation.FieldGroupID)
	}
	if m.nickname != nil {
		fields = append(fields, affiliation.FieldNickname)
	}
	if m.role != nil {
		fields = append(fields, affiliation.FieldRole)
	}
	if m.joined_at != nil {
		fields = append(fields, affiliation.FieldJoinedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AffiliationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case affiliation.FieldUserID:
		return m.UserID()
	case affiliation.FieldGroupID:
		return m.GroupID()
	case affiliation.FieldNickname:
		return m.Nickname()
	case affiliation.FieldRole:
		return m.Role()
	case affiliation.FieldJoinedAt:
		return m.JoinedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AffiliationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, errors.New("edge schema Affiliation does not support getting old values")
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AffiliationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case affiliation.FieldUserID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case affiliation.FieldGroupID:
		v, ok := value.(uuid.UUID)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case affiliation.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case affiliation.FieldRole:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case affiliation.FieldJoinedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Affiliation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AffiliationMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, affiliation.FieldRole)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AffiliationMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case affiliation.FieldRole:
		return m.AddedRole()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AffiliationMutation) AddField(name string, value ent.Value) error {
	switch name {
	case affiliation.FieldRole:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	}
	return fmt.Errorf("unknown Affiliation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AffiliationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AffiliationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AffiliationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Affiliation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AffiliationMutation) ResetField(name string) error {
	switch name {
	case affiliation.FieldUserID:
		m.ResetUserID()
		return nil
	case affiliation.FieldGroupID:
		m.ResetGroupID()
		return nil
	case affiliation.FieldNickname:
		m.ResetNickname()
		return nil
	case affiliation.FieldRole:
		m.ResetRole()
		return nil
	case affiliation.FieldJoinedAt:
		m.ResetJoinedAt()
		return nil
	}
	return fmt.Errorf("unknown Affiliation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AffiliationMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, affiliation.EdgeUser)
	}
	if m.group != nil {
		edges = append(edges, affiliation.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AffiliationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case affiliation.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case affiliation.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AffiliationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AffiliationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AffiliationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, affiliation.EdgeUser)
	}
	if m.clearedgroup {
		edges = append(edges, affiliation.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AffiliationMutation) EdgeCleared(name string) bool {
	switch name {
	case affiliation.EdgeUser:
		return m.cleareduser
	case affiliation.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AffiliationMutation) ClearEdge(name string) error {
	switch name {
	case affiliation.EdgeUser:
		m.ClearUser()
		return nil
	case affiliation.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown Affiliation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AffiliationMutation) ResetEdge(name string) error {
	switch name {
	case affiliation.EdgeUser:
		m.ResetUser()
		return nil
	case affiliation.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown Affiliation edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                       Op
	typ                      string
	id                       *uuid.UUID
	name                     *string
	description              *string
	nickname_policy          *string
	reveal_policy            *int8
	addreveal_policy         *int8
	invite_policy            *int8
	addinvite_policy         *int8
	created_at               *time.Time
	clearedFields            map[string]struct{}
	members                  map[uuid.UUID]struct{}
	removedmembers           map[uuid.UUID]struct{}
	clearedmembers           bool
	owner                    *uuid.UUID
	clearedowner             bool
	shared_study_logs        map[uuid.UUID]struct{}
	removedshared_study_logs map[uuid.UUID]struct{}
	clearedshared_study_logs bool
	invite_codes             map[int]struct{}
	removedinvite_codes      map[int]struct{}
	clearedinvite_codes      bool
	done                     bool
	oldValue                 func(context.Context) (*Group, error)
	predicates               []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id uuid.UUID) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
}

// SetNicknamePolicy sets the "nickname_policy" field.
func (m *GroupMutation) SetNicknamePolicy(s string) {
	m.nickname_policy = &s
}

// NicknamePolicy returns the value of the "nickname_policy" field in the mutation.
func (m *GroupMutation) NicknamePolicy() (r string, exists bool) {
	v := m.nickname_policy
	if v == nil {
		return
	}
	return *v, true
}

// OldNicknamePolicy returns the old "nickname_policy" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldNicknamePolicy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNicknamePolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNicknamePolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNicknamePolicy: %w", err)
	}
	return oldValue.NicknamePolicy, nil
}

// ResetNicknamePolicy resets all changes to the "nickname_policy" field.
func (m *GroupMutation) ResetNicknamePolicy() {
	m.nickname_policy = nil
}

// SetRevealPolicy sets the "reveal_policy" field.
func (m *GroupMutation) SetRevealPolicy(i int8) {
	m.reveal_policy = &i
	m.addreveal_policy = nil
}

// RevealPolicy returns the value of the "reveal_policy" field in the mutation.
func (m *GroupMutation) RevealPolicy() (r int8, exists bool) {
	v := m.reveal_policy
	if v == nil {
		return
	}
	return *v, true
}

// OldRevealPolicy returns the old "reveal_policy" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldRevealPolicy(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRevealPolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRevealPolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRevealPolicy: %w", err)
	}
	return oldValue.RevealPolicy, nil
}

// AddRevealPolicy adds i to the "reveal_policy" field.
func (m *GroupMutation) AddRevealPolicy(i int8) {
	if m.addreveal_policy != nil {
		*m.addreveal_policy += i
	} else {
		m.addreveal_policy = &i
	}
}

// AddedRevealPolicy returns the value that was added to the "reveal_policy" field in this mutation.
func (m *GroupMutation) AddedRevealPolicy() (r int8, exists bool) {
	v := m.addreveal_policy
	if v == nil {
		return
	}
	return *v, true
}

// ResetRevealPolicy resets all changes to the "reveal_policy" field.
func (m *GroupMutation) ResetRevealPolicy() {
	m.reveal_policy = nil
	m.addreveal_policy = nil
}

// SetInvitePolicy sets the "invite_policy" field.
func (m *GroupMutation) SetInvitePolicy(i int8) {
	m.invite_policy = &i
	m.addinvite_policy = nil
}

// InvitePolicy returns the value of the "invite_policy" field in the mutation.
func (m *GroupMutation) InvitePolicy() (r int8, exists bool) {
	v := m.invite_policy
	if v == nil {
		return
	}
	return *v, true
}

// OldInvitePolicy returns the old "invite_policy" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldInvitePolicy(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInvitePolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInvitePolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInvitePolicy: %w", err)
	}
	return oldValue.InvitePolicy, nil
}

// AddInvitePolicy adds i to the "invite_policy" field.
func (m *GroupMutation) AddInvitePolicy(i int8) {
	if m.addinvite_policy != nil {
		*m.addinvite_policy += i
	} else {
		m.addinvite_policy = &i
	}
}

// AddedInvitePolicy returns the value that was added to the "invite_policy" field in this mutation.
func (m *GroupMutation) AddedInvitePolicy() (r int8, exists bool) {
	v := m.addinvite_policy
	if v == nil {
		return
	}
	return *v, true
}

// ResetInvitePolicy resets all changes to the "invite_policy" field.
func (m *GroupMutation) ResetInvitePolicy() {
	m.invite_policy = nil
	m.addinvite_policy = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddMemberIDs adds the "members" edge to the User entity by ids.
func (m *GroupMutation) AddMemberIDs(ids ...uuid.UUID) {
	if m.members == nil {
		m.members = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the User entity.
func (m *GroupMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the User entity was cleared.
func (m *GroupMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the User entity by IDs.
func (m *GroupMutation) RemoveMemberIDs(ids ...uuid.UUID) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the User entity.
func (m *GroupMutation) RemovedMembersIDs() (ids []uuid.UUID) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *GroupMutation) MembersIDs() (ids []uuid.UUID) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// SetOwnerID sets the "owner" edge to the User entity by id.
func (m *GroupMutation) SetOwnerID(id uuid.UUID) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *GroupMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *GroupMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *GroupMutation) OwnerID() (id uuid.UUID, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) OwnerIDs() (ids []uuid.UUID) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *GroupMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// AddSharedStudyLogIDs adds the "shared_study_logs" edge to the StudyLog entity by ids.
func (m *GroupMutation) AddSharedStudyLogIDs(ids ...uuid.UUID) {
	if m.shared_study_logs == nil {
		m.shared_study_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.shared_study_logs[ids[i]] = struct{}{}
	}
}

// ClearSharedStudyLogs clears the "shared_study_logs" edge to the StudyLog entity.
func (m *GroupMutation) ClearSharedStudyLogs() {
	m.clearedshared_study_logs = true
}

// SharedStudyLogsCleared reports if the "shared_study_logs" edge to the StudyLog entity was cleared.
func (m *GroupMutation) SharedStudyLogsCleared() bool {
	return m.clearedshared_study_logs
}

// RemoveSharedStudyLogIDs removes the "shared_study_logs" edge to the StudyLog entity by IDs.
func (m *GroupMutation) RemoveSharedStudyLogIDs(ids ...uuid.UUID) {
	if m.removedshared_study_logs == nil {
		m.removedshared_study_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.shared_study_logs, ids[i])
		m.removedshared_study_logs[ids[i]] = struct{}{}
	}
}

// RemovedSharedStudyLogs returns the removed IDs of the "shared_study_logs" edge to the StudyLog entity.
func (m *GroupMutation) RemovedSharedStudyLogsIDs() (ids []uuid.UUID) {
	for id := range m.removedshared_study_logs {
		ids = append(ids, id)
	}
	return
}

// SharedStudyLogsIDs returns the "shared_study_logs" edge IDs in the mutation.
func (m *GroupMutation) SharedStudyLogsIDs() (ids []uuid.UUID) {
	for id := range m.shared_study_logs {
		ids = append(ids, id)
	}
	return
}

// ResetSharedStudyLogs resets all changes to the "shared_study_logs" edge.
func (m *GroupMutation) ResetSharedStudyLogs() {
	m.shared_study_logs = nil
	m.clearedshared_study_logs = false
	m.removedshared_study_logs = nil
}

// AddInviteCodeIDs adds the "invite_codes" edge to the InviteCode entity by ids.
func (m *GroupMutation) AddInviteCodeIDs(ids ...int) {
	if m.invite_codes == nil {
		m.invite_codes = make(map[int]struct{})
	}
	for i := range ids {
		m.invite_codes[ids[i]] = struct{}{}
	}
}

// ClearInviteCodes clears the "invite_codes" edge to the InviteCode entity.
func (m *GroupMutation) ClearInviteCodes() {
	m.clearedinvite_codes = true
}

// InviteCodesCleared reports if the "invite_codes" edge to the InviteCode entity was cleared.
func (m *GroupMutation) InviteCodesCleared() bool {
	return m.clearedinvite_codes
}

// RemoveInviteCodeIDs removes the "invite_codes" edge to the InviteCode entity by IDs.
func (m *GroupMutation) RemoveInviteCodeIDs(ids ...int) {
	if m.removedinvite_codes == nil {
		m.removedinvite_codes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.invite_codes, ids[i])
		m.removedinvite_codes[ids[i]] = struct{}{}
	}
}

// RemovedInviteCodes returns the removed IDs of the "invite_codes" edge to the InviteCode entity.
func (m *GroupMutation) RemovedInviteCodesIDs() (ids []int) {
	for id := range m.removedinvite_codes {
		ids = append(ids, id)
	}
	return
}

// InviteCodesIDs returns the "invite_codes" edge IDs in the mutation.
func (m *GroupMutation) InviteCodesIDs() (ids []int) {
	for id := range m.invite_codes {
		ids = append(ids, id)
	}
	return
}

// ResetInviteCodes resets all changes to the "invite_codes" edge.
func (m *GroupMutation) ResetInviteCodes() {
	m.invite_codes = nil
	m.clearedinvite_codes = false
	m.removedinvite_codes = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.nickname_policy != nil {
		fields = append(fields, group.FieldNicknamePolicy)
	}
	if m.reveal_policy != nil {
		fields = append(fields, group.FieldRevealPolicy)
	}
	if m.invite_policy != nil {
		fields = append(fields, group.FieldInvitePolicy)
	}
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldName:
		return m.Name()
	case group.FieldDescription:
		return m.Description()
	case group.FieldNicknamePolicy:
		return m.NicknamePolicy()
	case group.FieldRevealPolicy:
		return m.RevealPolicy()
	case group.FieldInvitePolicy:
		return m.InvitePolicy()
	case group.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldNicknamePolicy:
		return m.OldNicknamePolicy(ctx)
	case group.FieldRevealPolicy:
		return m.OldRevealPolicy(ctx)
	case group.FieldInvitePolicy:
		return m.OldInvitePolicy(ctx)
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldNicknamePolicy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNicknamePolicy(v)
		return nil
	case group.FieldRevealPolicy:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRevealPolicy(v)
		return nil
	case group.FieldInvitePolicy:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInvitePolicy(v)
		return nil
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	var fields []string
	if m.addreveal_policy != nil {
		fields = append(fields, group.FieldRevealPolicy)
	}
	if m.addinvite_policy != nil {
		fields = append(fields, group.FieldInvitePolicy)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case group.FieldRevealPolicy:
		return m.AddedRevealPolicy()
	case group.FieldInvitePolicy:
		return m.AddedInvitePolicy()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	case group.FieldRevealPolicy:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRevealPolicy(v)
		return nil
	case group.FieldInvitePolicy:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInvitePolicy(v)
		return nil
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldNicknamePolicy:
		m.ResetNicknamePolicy()
		return nil
	case group.FieldRevealPolicy:
		m.ResetRevealPolicy()
		return nil
	case group.FieldInvitePolicy:
		m.ResetInvitePolicy()
		return nil
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.owner != nil {
		edges = append(edges, group.EdgeOwner)
	}
	if m.shared_study_logs != nil {
		edges = append(edges, group.EdgeSharedStudyLogs)
	}
	if m.invite_codes != nil {
		edges = append(edges, group.EdgeInviteCodes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeSharedStudyLogs:
		ids := make([]ent.Value, 0, len(m.shared_study_logs))
		for id := range m.shared_study_logs {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeInviteCodes:
		ids := make([]ent.Value, 0, len(m.invite_codes))
		for id := range m.invite_codes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	if m.removedshared_study_logs != nil {
		edges = append(edges, group.EdgeSharedStudyLogs)
	}
	if m.removedinvite_codes != nil {
		edges = append(edges, group.EdgeInviteCodes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeSharedStudyLogs:
		ids := make([]ent.Value, 0, len(m.removedshared_study_logs))
		for id := range m.removedshared_study_logs {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeInviteCodes:
		ids := make([]ent.Value, 0, len(m.removedinvite_codes))
		for id := range m.removedinvite_codes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedmembers {
		edges = append(edges, group.EdgeMembers)
	}
	if m.clearedowner {
		edges = append(edges, group.EdgeOwner)
	}
	if m.clearedshared_study_logs {
		edges = append(edges, group.EdgeSharedStudyLogs)
	}
	if m.clearedinvite_codes {
		edges = append(edges, group.EdgeInviteCodes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeMembers:
		return m.clearedmembers
	case group.EdgeOwner:
		return m.clearedowner
	case group.EdgeSharedStudyLogs:
		return m.clearedshared_study_logs
	case group.EdgeInviteCodes:
		return m.clearedinvite_codes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	case group.EdgeOwner:
		m.ResetOwner()
		return nil
	case group.EdgeSharedStudyLogs:
		m.ResetSharedStudyLogs()
		return nil
	case group.EdgeInviteCodes:
		m.ResetInviteCodes()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// InviteCodeMutation represents an operation that mutates the InviteCode nodes in the graph.
type InviteCodeMutation struct {
	config
	op            Op
	typ           string
	id            *int
	code          *string
	used          *bool
	clearedFields map[string]struct{}
	group         *uuid.UUID
	clearedgroup  bool
	done          bool
	oldValue      func(context.Context) (*InviteCode, error)
	predicates    []predicate.InviteCode
}

var _ ent.Mutation = (*InviteCodeMutation)(nil)

// invitecodeOption allows management of the mutation configuration using functional options.
type invitecodeOption func(*InviteCodeMutation)

// newInviteCodeMutation creates new mutation for the InviteCode entity.
func newInviteCodeMutation(c config, op Op, opts ...invitecodeOption) *InviteCodeMutation {
	m := &InviteCodeMutation{
		config:        c,
		op:            op,
		typ:           TypeInviteCode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInviteCodeID sets the ID field of the mutation.
func withInviteCodeID(id int) invitecodeOption {
	return func(m *InviteCodeMutation) {
		var (
			err   error
			once  sync.Once
			value *InviteCode
		)
		m.oldValue = func(ctx context.Context) (*InviteCode, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().InviteCode.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInviteCode sets the old InviteCode of the mutation.
func withInviteCode(node *InviteCode) invitecodeOption {
	return func(m *InviteCodeMutation) {
		m.oldValue = func(context.Context) (*InviteCode, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InviteCodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InviteCodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InviteCodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InviteCodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().InviteCode.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCode sets the "code" field.
func (m *InviteCodeMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *InviteCodeMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the InviteCode entity.
// If the InviteCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteCodeMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *InviteCodeMutation) ResetCode() {
	m.code = nil
}

// SetUsed sets the "used" field.
func (m *InviteCodeMutation) SetUsed(b bool) {
	m.used = &b
}

// Used returns the value of the "used" field in the mutation.
func (m *InviteCodeMutation) Used() (r bool, exists bool) {
	v := m.used
	if v == nil {
		return
	}
	return *v, true
}

// OldUsed returns the old "used" field's value of the InviteCode entity.
// If the InviteCode object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteCodeMutation) OldUsed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsed: %w", err)
	}
	return oldValue.Used, nil
}

// ResetUsed resets all changes to the "used" field.
func (m *InviteCodeMutation) ResetUsed() {
	m.used = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *InviteCodeMutation) SetGroupID(id uuid.UUID) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *InviteCodeMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *InviteCodeMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *InviteCodeMutation) GroupID() (id uuid.UUID, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *InviteCodeMutation) GroupIDs() (ids []uuid.UUID) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *InviteCodeMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the InviteCodeMutation builder.
func (m *InviteCodeMutation) Where(ps ...predicate.InviteCode) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InviteCodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InviteCodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.InviteCode, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InviteCodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InviteCodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (InviteCode).
func (m *InviteCodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InviteCodeMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.code != nil {
		fields = append(fields, invitecode.FieldCode)
	}
	if m.used != nil {
		fields = append(fields, invitecode.FieldUsed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InviteCodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invitecode.FieldCode:
		return m.Code()
	case invitecode.FieldUsed:
		return m.Used()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InviteCodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invitecode.FieldCode:
		return m.OldCode(ctx)
	case invitecode.FieldUsed:
		return m.OldUsed(ctx)
	}
	return nil, fmt.Errorf("unknown InviteCode field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteCodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invitecode.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case invitecode.FieldUsed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsed(v)
		return nil
	}
	return fmt.Errorf("unknown InviteCode field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InviteCodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InviteCodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteCodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown InviteCode numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InviteCodeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InviteCodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InviteCodeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown InviteCode nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InviteCodeMutation) ResetField(name string) error {
	switch name {
	case invitecode.FieldCode:
		m.ResetCode()
		return nil
	case invitecode.FieldUsed:
		m.ResetUsed()
		return nil
	}
	return fmt.Errorf("unknown InviteCode field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InviteCodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, invitecode.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InviteCodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invitecode.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InviteCodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InviteCodeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InviteCodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, invitecode.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InviteCodeMutation) EdgeCleared(name string) bool {
	switch name {
	case invitecode.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InviteCodeMutation) ClearEdge(name string) error {
	switch name {
	case invitecode.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown InviteCode unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InviteCodeMutation) ResetEdge(name string) error {
	switch name {
	case invitecode.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown InviteCode edge %s", name)
}

// RefreshTokenMutation represents an operation that mutates the RefreshToken nodes in the graph.
type RefreshTokenMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *uuid.UUID
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*RefreshToken, error)
	predicates    []predicate.RefreshToken
}

var _ ent.Mutation = (*RefreshTokenMutation)(nil)

// refreshtokenOption allows management of the mutation configuration using functional options.
type refreshtokenOption func(*RefreshTokenMutation)

// newRefreshTokenMutation creates new mutation for the RefreshToken entity.
func newRefreshTokenMutation(c config, op Op, opts ...refreshtokenOption) *RefreshTokenMutation {
	m := &RefreshTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeRefreshToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRefreshTokenID sets the ID field of the mutation.
func withRefreshTokenID(id uuid.UUID) refreshtokenOption {
	return func(m *RefreshTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *RefreshToken
		)
		m.oldValue = func(ctx context.Context) (*RefreshToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RefreshToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRefreshToken sets the old RefreshToken of the mutation.
func withRefreshToken(node *RefreshToken) refreshtokenOption {
	return func(m *RefreshTokenMutation) {
		m.oldValue = func(context.Context) (*RefreshToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RefreshTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RefreshTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of RefreshToken entities.
func (m *RefreshTokenMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RefreshTokenMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *RefreshTokenMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().RefreshToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *RefreshTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RefreshTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the RefreshToken entity.
// If the RefreshToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RefreshTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RefreshTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *RefreshTokenMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *RefreshTokenMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *RefreshTokenMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *RefreshTokenMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *RefreshTokenMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *RefreshTokenMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the RefreshTokenMutation builder.
func (m *RefreshTokenMutation) Where(ps ...predicate.RefreshToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the RefreshTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *RefreshTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.RefreshToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *RefreshTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *RefreshTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (RefreshToken).
func (m *RefreshTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RefreshTokenMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.created_at != nil {
		fields = append(fields, refreshtoken.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RefreshTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case refreshtoken.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RefreshTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case refreshtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RefreshToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case refreshtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RefreshToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RefreshTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RefreshTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RefreshTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RefreshToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RefreshTokenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RefreshTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RefreshTokenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RefreshToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RefreshTokenMutation) ResetField(name string) error {
	switch name {
	case refreshtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RefreshTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, refreshtoken.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RefreshTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case refreshtoken.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RefreshTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RefreshTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RefreshTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, refreshtoken.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RefreshTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case refreshtoken.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RefreshTokenMutation) ClearEdge(name string) error {
	switch name {
	case refreshtoken.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RefreshTokenMutation) ResetEdge(name string) error {
	switch name {
	case refreshtoken.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown RefreshToken edge %s", name)
}

// StudyLogMutation represents an operation that mutates the StudyLog nodes in the graph.
type StudyLogMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	start_at            *time.Time
	end_at              *time.Time
	content             *string
	clearedFields       map[string]struct{}
	user                *uuid.UUID
	cleareduser         bool
	shared_group        map[uuid.UUID]struct{}
	removedshared_group map[uuid.UUID]struct{}
	clearedshared_group bool
	done                bool
	oldValue            func(context.Context) (*StudyLog, error)
	predicates          []predicate.StudyLog
}

var _ ent.Mutation = (*StudyLogMutation)(nil)

// studylogOption allows management of the mutation configuration using functional options.
type studylogOption func(*StudyLogMutation)

// newStudyLogMutation creates new mutation for the StudyLog entity.
func newStudyLogMutation(c config, op Op, opts ...studylogOption) *StudyLogMutation {
	m := &StudyLogMutation{
		config:        c,
		op:            op,
		typ:           TypeStudyLog,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withStudyLogID sets the ID field of the mutation.
func withStudyLogID(id uuid.UUID) studylogOption {
	return func(m *StudyLogMutation) {
		var (
			err   error
			once  sync.Once
			value *StudyLog
		)
		m.oldValue = func(ctx context.Context) (*StudyLog, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().StudyLog.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withStudyLog sets the old StudyLog of the mutation.
func withStudyLog(node *StudyLog) studylogOption {
	return func(m *StudyLogMutation) {
		m.oldValue = func(context.Context) (*StudyLog, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m StudyLogMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m StudyLogMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of StudyLog entities.
func (m *StudyLogMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *StudyLogMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *StudyLogMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().StudyLog.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetStartAt sets the "start_at" field.
func (m *StudyLogMutation) SetStartAt(t time.Time) {
	m.start_at = &t
}

// StartAt returns the value of the "start_at" field in the mutation.
func (m *StudyLogMutation) StartAt() (r time.Time, exists bool) {
	v := m.start_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStartAt returns the old "start_at" field's value of the StudyLog entity.
// If the StudyLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudyLogMutation) OldStartAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartAt: %w", err)
	}
	return oldValue.StartAt, nil
}

// ResetStartAt resets all changes to the "start_at" field.
func (m *StudyLogMutation) ResetStartAt() {
	m.start_at = nil
}

// SetEndAt sets the "end_at" field.
func (m *StudyLogMutation) SetEndAt(t time.Time) {
	m.end_at = &t
}

// EndAt returns the value of the "end_at" field in the mutation.
func (m *StudyLogMutation) EndAt() (r time.Time, exists bool) {
	v := m.end_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEndAt returns the old "end_at" field's value of the StudyLog entity.
// If the StudyLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudyLogMutation) OldEndAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndAt: %w", err)
	}
	return oldValue.EndAt, nil
}

// ResetEndAt resets all changes to the "end_at" field.
func (m *StudyLogMutation) ResetEndAt() {
	m.end_at = nil
}

// SetContent sets the "content" field.
func (m *StudyLogMutation) SetContent(s string) {
	m.content = &s
}

// Content returns the value of the "content" field in the mutation.
func (m *StudyLogMutation) Content() (r string, exists bool) {
	v := m.content
	if v == nil {
		return
	}
	return *v, true
}

// OldContent returns the old "content" field's value of the StudyLog entity.
// If the StudyLog object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *StudyLogMutation) OldContent(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContent: %w", err)
	}
	return oldValue.Content, nil
}

// ResetContent resets all changes to the "content" field.
func (m *StudyLogMutation) ResetContent() {
	m.content = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *StudyLogMutation) SetUserID(id uuid.UUID) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *StudyLogMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *StudyLogMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *StudyLogMutation) UserID() (id uuid.UUID, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *StudyLogMutation) UserIDs() (ids []uuid.UUID) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *StudyLogMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddSharedGroupIDs adds the "shared_group" edge to the Group entity by ids.
func (m *StudyLogMutation) AddSharedGroupIDs(ids ...uuid.UUID) {
	if m.shared_group == nil {
		m.shared_group = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.shared_group[ids[i]] = struct{}{}
	}
}

// ClearSharedGroup clears the "shared_group" edge to the Group entity.
func (m *StudyLogMutation) ClearSharedGroup() {
	m.clearedshared_group = true
}

// SharedGroupCleared reports if the "shared_group" edge to the Group entity was cleared.
func (m *StudyLogMutation) SharedGroupCleared() bool {
	return m.clearedshared_group
}

// RemoveSharedGroupIDs removes the "shared_group" edge to the Group entity by IDs.
func (m *StudyLogMutation) RemoveSharedGroupIDs(ids ...uuid.UUID) {
	if m.removedshared_group == nil {
		m.removedshared_group = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.shared_group, ids[i])
		m.removedshared_group[ids[i]] = struct{}{}
	}
}

// RemovedSharedGroup returns the removed IDs of the "shared_group" edge to the Group entity.
func (m *StudyLogMutation) RemovedSharedGroupIDs() (ids []uuid.UUID) {
	for id := range m.removedshared_group {
		ids = append(ids, id)
	}
	return
}

// SharedGroupIDs returns the "shared_group" edge IDs in the mutation.
func (m *StudyLogMutation) SharedGroupIDs() (ids []uuid.UUID) {
	for id := range m.shared_group {
		ids = append(ids, id)
	}
	return
}

// ResetSharedGroup resets all changes to the "shared_group" edge.
func (m *StudyLogMutation) ResetSharedGroup() {
	m.shared_group = nil
	m.clearedshared_group = false
	m.removedshared_group = nil
}

// Where appends a list predicates to the StudyLogMutation builder.
func (m *StudyLogMutation) Where(ps ...predicate.StudyLog) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the StudyLogMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *StudyLogMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.StudyLog, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *StudyLogMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *StudyLogMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (StudyLog).
func (m *StudyLogMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *StudyLogMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.start_at != nil {
		fields = append(fields, studylog.FieldStartAt)
	}
	if m.end_at != nil {
		fields = append(fields, studylog.FieldEndAt)
	}
	if m.content != nil {
		fields = append(fields, studylog.FieldContent)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *StudyLogMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case studylog.FieldStartAt:
		return m.StartAt()
	case studylog.FieldEndAt:
		return m.EndAt()
	case studylog.FieldContent:
		return m.Content()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *StudyLogMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case studylog.FieldStartAt:
		return m.OldStartAt(ctx)
	case studylog.FieldEndAt:
		return m.OldEndAt(ctx)
	case studylog.FieldContent:
		return m.OldContent(ctx)
	}
	return nil, fmt.Errorf("unknown StudyLog field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudyLogMutation) SetField(name string, value ent.Value) error {
	switch name {
	case studylog.FieldStartAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartAt(v)
		return nil
	case studylog.FieldEndAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndAt(v)
		return nil
	case studylog.FieldContent:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContent(v)
		return nil
	}
	return fmt.Errorf("unknown StudyLog field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *StudyLogMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *StudyLogMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *StudyLogMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown StudyLog numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *StudyLogMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *StudyLogMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *StudyLogMutation) ClearField(name string) error {
	return fmt.Errorf("unknown StudyLog nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *StudyLogMutation) ResetField(name string) error {
	switch name {
	case studylog.FieldStartAt:
		m.ResetStartAt()
		return nil
	case studylog.FieldEndAt:
		m.ResetEndAt()
		return nil
	case studylog.FieldContent:
		m.ResetContent()
		return nil
	}
	return fmt.Errorf("unknown StudyLog field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *StudyLogMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, studylog.EdgeUser)
	}
	if m.shared_group != nil {
		edges = append(edges, studylog.EdgeSharedGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *StudyLogMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case studylog.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case studylog.EdgeSharedGroup:
		ids := make([]ent.Value, 0, len(m.shared_group))
		for id := range m.shared_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *StudyLogMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedshared_group != nil {
		edges = append(edges, studylog.EdgeSharedGroup)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *StudyLogMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case studylog.EdgeSharedGroup:
		ids := make([]ent.Value, 0, len(m.removedshared_group))
		for id := range m.removedshared_group {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *StudyLogMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, studylog.EdgeUser)
	}
	if m.clearedshared_group {
		edges = append(edges, studylog.EdgeSharedGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *StudyLogMutation) EdgeCleared(name string) bool {
	switch name {
	case studylog.EdgeUser:
		return m.cleareduser
	case studylog.EdgeSharedGroup:
		return m.clearedshared_group
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *StudyLogMutation) ClearEdge(name string) error {
	switch name {
	case studylog.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown StudyLog unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *StudyLogMutation) ResetEdge(name string) error {
	switch name {
	case studylog.EdgeUser:
		m.ResetUser()
		return nil
	case studylog.EdgeSharedGroup:
		m.ResetSharedGroup()
		return nil
	}
	return fmt.Errorf("unknown StudyLog edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                    Op
	typ                   string
	id                    *uuid.UUID
	name                  *string
	oauth_id              *string
	oauth_provider        *int8
	addoauth_provider     *int8
	created_at            *time.Time
	clearedFields         map[string]struct{}
	joined_groups         map[uuid.UUID]struct{}
	removedjoined_groups  map[uuid.UUID]struct{}
	clearedjoined_groups  bool
	owned_groups          map[uuid.UUID]struct{}
	removedowned_groups   map[uuid.UUID]struct{}
	clearedowned_groups   bool
	study_logs            map[uuid.UUID]struct{}
	removedstudy_logs     map[uuid.UUID]struct{}
	clearedstudy_logs     bool
	refresh_tokens        map[uuid.UUID]struct{}
	removedrefresh_tokens map[uuid.UUID]struct{}
	clearedrefresh_tokens bool
	done                  bool
	oldValue              func(context.Context) (*User, error)
	predicates            []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetOauthID sets the "oauth_id" field.
func (m *UserMutation) SetOauthID(s string) {
	m.oauth_id = &s
}

// OauthID returns the value of the "oauth_id" field in the mutation.
func (m *UserMutation) OauthID() (r string, exists bool) {
	v := m.oauth_id
	if v == nil {
		return
	}
	return *v, true
}

// OldOauthID returns the old "oauth_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOauthID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauthID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauthID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauthID: %w", err)
	}
	return oldValue.OauthID, nil
}

// ResetOauthID resets all changes to the "oauth_id" field.
func (m *UserMutation) ResetOauthID() {
	m.oauth_id = nil
}

// SetOauthProvider sets the "oauth_provider" field.
func (m *UserMutation) SetOauthProvider(i int8) {
	m.oauth_provider = &i
	m.addoauth_provider = nil
}

// OauthProvider returns the value of the "oauth_provider" field in the mutation.
func (m *UserMutation) OauthProvider() (r int8, exists bool) {
	v := m.oauth_provider
	if v == nil {
		return
	}
	return *v, true
}

// OldOauthProvider returns the old "oauth_provider" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOauthProvider(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauthProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauthProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauthProvider: %w", err)
	}
	return oldValue.OauthProvider, nil
}

// AddOauthProvider adds i to the "oauth_provider" field.
func (m *UserMutation) AddOauthProvider(i int8) {
	if m.addoauth_provider != nil {
		*m.addoauth_provider += i
	} else {
		m.addoauth_provider = &i
	}
}

// AddedOauthProvider returns the value that was added to the "oauth_provider" field in this mutation.
func (m *UserMutation) AddedOauthProvider() (r int8, exists bool) {
	v := m.addoauth_provider
	if v == nil {
		return
	}
	return *v, true
}

// ResetOauthProvider resets all changes to the "oauth_provider" field.
func (m *UserMutation) ResetOauthProvider() {
	m.oauth_provider = nil
	m.addoauth_provider = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddJoinedGroupIDs adds the "joined_groups" edge to the Group entity by ids.
func (m *UserMutation) AddJoinedGroupIDs(ids ...uuid.UUID) {
	if m.joined_groups == nil {
		m.joined_groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.joined_groups[ids[i]] = struct{}{}
	}
}

// ClearJoinedGroups clears the "joined_groups" edge to the Group entity.
func (m *UserMutation) ClearJoinedGroups() {
	m.clearedjoined_groups = true
}

// JoinedGroupsCleared reports if the "joined_groups" edge to the Group entity was cleared.
func (m *UserMutation) JoinedGroupsCleared() bool {
	return m.clearedjoined_groups
}

// RemoveJoinedGroupIDs removes the "joined_groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveJoinedGroupIDs(ids ...uuid.UUID) {
	if m.removedjoined_groups == nil {
		m.removedjoined_groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.joined_groups, ids[i])
		m.removedjoined_groups[ids[i]] = struct{}{}
	}
}

// RemovedJoinedGroups returns the removed IDs of the "joined_groups" edge to the Group entity.
func (m *UserMutation) RemovedJoinedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedjoined_groups {
		ids = append(ids, id)
	}
	return
}

// JoinedGroupsIDs returns the "joined_groups" edge IDs in the mutation.
func (m *UserMutation) JoinedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.joined_groups {
		ids = append(ids, id)
	}
	return
}

// ResetJoinedGroups resets all changes to the "joined_groups" edge.
func (m *UserMutation) ResetJoinedGroups() {
	m.joined_groups = nil
	m.clearedjoined_groups = false
	m.removedjoined_groups = nil
}

// AddOwnedGroupIDs adds the "owned_groups" edge to the Group entity by ids.
func (m *UserMutation) AddOwnedGroupIDs(ids ...uuid.UUID) {
	if m.owned_groups == nil {
		m.owned_groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.owned_groups[ids[i]] = struct{}{}
	}
}

// ClearOwnedGroups clears the "owned_groups" edge to the Group entity.
func (m *UserMutation) ClearOwnedGroups() {
	m.clearedowned_groups = true
}

// OwnedGroupsCleared reports if the "owned_groups" edge to the Group entity was cleared.
func (m *UserMutation) OwnedGroupsCleared() bool {
	return m.clearedowned_groups
}

// RemoveOwnedGroupIDs removes the "owned_groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveOwnedGroupIDs(ids ...uuid.UUID) {
	if m.removedowned_groups == nil {
		m.removedowned_groups = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.owned_groups, ids[i])
		m.removedowned_groups[ids[i]] = struct{}{}
	}
}

// RemovedOwnedGroups returns the removed IDs of the "owned_groups" edge to the Group entity.
func (m *UserMutation) RemovedOwnedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.removedowned_groups {
		ids = append(ids, id)
	}
	return
}

// OwnedGroupsIDs returns the "owned_groups" edge IDs in the mutation.
func (m *UserMutation) OwnedGroupsIDs() (ids []uuid.UUID) {
	for id := range m.owned_groups {
		ids = append(ids, id)
	}
	return
}

// ResetOwnedGroups resets all changes to the "owned_groups" edge.
func (m *UserMutation) ResetOwnedGroups() {
	m.owned_groups = nil
	m.clearedowned_groups = false
	m.removedowned_groups = nil
}

// AddStudyLogIDs adds the "study_logs" edge to the StudyLog entity by ids.
func (m *UserMutation) AddStudyLogIDs(ids ...uuid.UUID) {
	if m.study_logs == nil {
		m.study_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.study_logs[ids[i]] = struct{}{}
	}
}

// ClearStudyLogs clears the "study_logs" edge to the StudyLog entity.
func (m *UserMutation) ClearStudyLogs() {
	m.clearedstudy_logs = true
}

// StudyLogsCleared reports if the "study_logs" edge to the StudyLog entity was cleared.
func (m *UserMutation) StudyLogsCleared() bool {
	return m.clearedstudy_logs
}

// RemoveStudyLogIDs removes the "study_logs" edge to the StudyLog entity by IDs.
func (m *UserMutation) RemoveStudyLogIDs(ids ...uuid.UUID) {
	if m.removedstudy_logs == nil {
		m.removedstudy_logs = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.study_logs, ids[i])
		m.removedstudy_logs[ids[i]] = struct{}{}
	}
}

// RemovedStudyLogs returns the removed IDs of the "study_logs" edge to the StudyLog entity.
func (m *UserMutation) RemovedStudyLogsIDs() (ids []uuid.UUID) {
	for id := range m.removedstudy_logs {
		ids = append(ids, id)
	}
	return
}

// StudyLogsIDs returns the "study_logs" edge IDs in the mutation.
func (m *UserMutation) StudyLogsIDs() (ids []uuid.UUID) {
	for id := range m.study_logs {
		ids = append(ids, id)
	}
	return
}

// ResetStudyLogs resets all changes to the "study_logs" edge.
func (m *UserMutation) ResetStudyLogs() {
	m.study_logs = nil
	m.clearedstudy_logs = false
	m.removedstudy_logs = nil
}

// AddRefreshTokenIDs adds the "refresh_tokens" edge to the RefreshToken entity by ids.
func (m *UserMutation) AddRefreshTokenIDs(ids ...uuid.UUID) {
	if m.refresh_tokens == nil {
		m.refresh_tokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.refresh_tokens[ids[i]] = struct{}{}
	}
}

// ClearRefreshTokens clears the "refresh_tokens" edge to the RefreshToken entity.
func (m *UserMutation) ClearRefreshTokens() {
	m.clearedrefresh_tokens = true
}

// RefreshTokensCleared reports if the "refresh_tokens" edge to the RefreshToken entity was cleared.
func (m *UserMutation) RefreshTokensCleared() bool {
	return m.clearedrefresh_tokens
}

// RemoveRefreshTokenIDs removes the "refresh_tokens" edge to the RefreshToken entity by IDs.
func (m *UserMutation) RemoveRefreshTokenIDs(ids ...uuid.UUID) {
	if m.removedrefresh_tokens == nil {
		m.removedrefresh_tokens = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.refresh_tokens, ids[i])
		m.removedrefresh_tokens[ids[i]] = struct{}{}
	}
}

// RemovedRefreshTokens returns the removed IDs of the "refresh_tokens" edge to the RefreshToken entity.
func (m *UserMutation) RemovedRefreshTokensIDs() (ids []uuid.UUID) {
	for id := range m.removedrefresh_tokens {
		ids = append(ids, id)
	}
	return
}

// RefreshTokensIDs returns the "refresh_tokens" edge IDs in the mutation.
func (m *UserMutation) RefreshTokensIDs() (ids []uuid.UUID) {
	for id := range m.refresh_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetRefreshTokens resets all changes to the "refresh_tokens" edge.
func (m *UserMutation) ResetRefreshTokens() {
	m.refresh_tokens = nil
	m.clearedrefresh_tokens = false
	m.removedrefresh_tokens = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.oauth_id != nil {
		fields = append(fields, user.FieldOauthID)
	}
	if m.oauth_provider != nil {
		fields = append(fields, user.FieldOauthProvider)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldOauthID:
		return m.OauthID()
	case user.FieldOauthProvider:
		return m.OauthProvider()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldOauthID:
		return m.OldOauthID(ctx)
	case user.FieldOauthProvider:
		return m.OldOauthProvider(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldOauthID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauthID(v)
		return nil
	case user.FieldOauthProvider:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauthProvider(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addoauth_provider != nil {
		fields = append(fields, user.FieldOauthProvider)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldOauthProvider:
		return m.AddedOauthProvider()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldOauthProvider:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddOauthProvider(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldOauthID:
		m.ResetOauthID()
		return nil
	case user.FieldOauthProvider:
		m.ResetOauthProvider()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.joined_groups != nil {
		edges = append(edges, user.EdgeJoinedGroups)
	}
	if m.owned_groups != nil {
		edges = append(edges, user.EdgeOwnedGroups)
	}
	if m.study_logs != nil {
		edges = append(edges, user.EdgeStudyLogs)
	}
	if m.refresh_tokens != nil {
		edges = append(edges, user.EdgeRefreshTokens)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeJoinedGroups:
		ids := make([]ent.Value, 0, len(m.joined_groups))
		for id := range m.joined_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOwnedGroups:
		ids := make([]ent.Value, 0, len(m.owned_groups))
		for id := range m.owned_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStudyLogs:
		ids := make([]ent.Value, 0, len(m.study_logs))
		for id := range m.study_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRefreshTokens:
		ids := make([]ent.Value, 0, len(m.refresh_tokens))
		for id := range m.refresh_tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedjoined_groups != nil {
		edges = append(edges, user.EdgeJoinedGroups)
	}
	if m.removedowned_groups != nil {
		edges = append(edges, user.EdgeOwnedGroups)
	}
	if m.removedstudy_logs != nil {
		edges = append(edges, user.EdgeStudyLogs)
	}
	if m.removedrefresh_tokens != nil {
		edges = append(edges, user.EdgeRefreshTokens)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeJoinedGroups:
		ids := make([]ent.Value, 0, len(m.removedjoined_groups))
		for id := range m.removedjoined_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOwnedGroups:
		ids := make([]ent.Value, 0, len(m.removedowned_groups))
		for id := range m.removedowned_groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeStudyLogs:
		ids := make([]ent.Value, 0, len(m.removedstudy_logs))
		for id := range m.removedstudy_logs {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeRefreshTokens:
		ids := make([]ent.Value, 0, len(m.removedrefresh_tokens))
		for id := range m.removedrefresh_tokens {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedjoined_groups {
		edges = append(edges, user.EdgeJoinedGroups)
	}
	if m.clearedowned_groups {
		edges = append(edges, user.EdgeOwnedGroups)
	}
	if m.clearedstudy_logs {
		edges = append(edges, user.EdgeStudyLogs)
	}
	if m.clearedrefresh_tokens {
		edges = append(edges, user.EdgeRefreshTokens)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeJoinedGroups:
		return m.clearedjoined_groups
	case user.EdgeOwnedGroups:
		return m.clearedowned_groups
	case user.EdgeStudyLogs:
		return m.clearedstudy_logs
	case user.EdgeRefreshTokens:
		return m.clearedrefresh_tokens
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeJoinedGroups:
		m.ResetJoinedGroups()
		return nil
	case user.EdgeOwnedGroups:
		m.ResetOwnedGroups()
		return nil
	case user.EdgeStudyLogs:
		m.ResetStudyLogs()
		return nil
	case user.EdgeRefreshTokens:
		m.ResetRefreshTokens()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

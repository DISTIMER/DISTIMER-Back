// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldDescription, v))
}

// NicknamePolicy applies equality check predicate on the "nickname_policy" field. It's identical to NicknamePolicyEQ.
func NicknamePolicy(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldNicknamePolicy, v))
}

// RevealPolicy applies equality check predicate on the "reveal_policy" field. It's identical to RevealPolicyEQ.
func RevealPolicy(v int8) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldRevealPolicy, v))
}

// InvitePolicy applies equality check predicate on the "invite_policy" field. It's identical to InvitePolicyEQ.
func InvitePolicy(v int8) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldInvitePolicy, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldDescription, v))
}

// NicknamePolicyEQ applies the EQ predicate on the "nickname_policy" field.
func NicknamePolicyEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldNicknamePolicy, v))
}

// NicknamePolicyNEQ applies the NEQ predicate on the "nickname_policy" field.
func NicknamePolicyNEQ(v string) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldNicknamePolicy, v))
}

// NicknamePolicyIn applies the In predicate on the "nickname_policy" field.
func NicknamePolicyIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldNicknamePolicy, vs...))
}

// NicknamePolicyNotIn applies the NotIn predicate on the "nickname_policy" field.
func NicknamePolicyNotIn(vs ...string) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldNicknamePolicy, vs...))
}

// NicknamePolicyGT applies the GT predicate on the "nickname_policy" field.
func NicknamePolicyGT(v string) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldNicknamePolicy, v))
}

// NicknamePolicyGTE applies the GTE predicate on the "nickname_policy" field.
func NicknamePolicyGTE(v string) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldNicknamePolicy, v))
}

// NicknamePolicyLT applies the LT predicate on the "nickname_policy" field.
func NicknamePolicyLT(v string) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldNicknamePolicy, v))
}

// NicknamePolicyLTE applies the LTE predicate on the "nickname_policy" field.
func NicknamePolicyLTE(v string) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldNicknamePolicy, v))
}

// NicknamePolicyContains applies the Contains predicate on the "nickname_policy" field.
func NicknamePolicyContains(v string) predicate.Group {
	return predicate.Group(sql.FieldContains(FieldNicknamePolicy, v))
}

// NicknamePolicyHasPrefix applies the HasPrefix predicate on the "nickname_policy" field.
func NicknamePolicyHasPrefix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasPrefix(FieldNicknamePolicy, v))
}

// NicknamePolicyHasSuffix applies the HasSuffix predicate on the "nickname_policy" field.
func NicknamePolicyHasSuffix(v string) predicate.Group {
	return predicate.Group(sql.FieldHasSuffix(FieldNicknamePolicy, v))
}

// NicknamePolicyEqualFold applies the EqualFold predicate on the "nickname_policy" field.
func NicknamePolicyEqualFold(v string) predicate.Group {
	return predicate.Group(sql.FieldEqualFold(FieldNicknamePolicy, v))
}

// NicknamePolicyContainsFold applies the ContainsFold predicate on the "nickname_policy" field.
func NicknamePolicyContainsFold(v string) predicate.Group {
	return predicate.Group(sql.FieldContainsFold(FieldNicknamePolicy, v))
}

// RevealPolicyEQ applies the EQ predicate on the "reveal_policy" field.
func RevealPolicyEQ(v int8) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldRevealPolicy, v))
}

// RevealPolicyNEQ applies the NEQ predicate on the "reveal_policy" field.
func RevealPolicyNEQ(v int8) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldRevealPolicy, v))
}

// RevealPolicyIn applies the In predicate on the "reveal_policy" field.
func RevealPolicyIn(vs ...int8) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldRevealPolicy, vs...))
}

// RevealPolicyNotIn applies the NotIn predicate on the "reveal_policy" field.
func RevealPolicyNotIn(vs ...int8) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldRevealPolicy, vs...))
}

// RevealPolicyGT applies the GT predicate on the "reveal_policy" field.
func RevealPolicyGT(v int8) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldRevealPolicy, v))
}

// RevealPolicyGTE applies the GTE predicate on the "reveal_policy" field.
func RevealPolicyGTE(v int8) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldRevealPolicy, v))
}

// RevealPolicyLT applies the LT predicate on the "reveal_policy" field.
func RevealPolicyLT(v int8) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldRevealPolicy, v))
}

// RevealPolicyLTE applies the LTE predicate on the "reveal_policy" field.
func RevealPolicyLTE(v int8) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldRevealPolicy, v))
}

// InvitePolicyEQ applies the EQ predicate on the "invite_policy" field.
func InvitePolicyEQ(v int8) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldInvitePolicy, v))
}

// InvitePolicyNEQ applies the NEQ predicate on the "invite_policy" field.
func InvitePolicyNEQ(v int8) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldInvitePolicy, v))
}

// InvitePolicyIn applies the In predicate on the "invite_policy" field.
func InvitePolicyIn(vs ...int8) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldInvitePolicy, vs...))
}

// InvitePolicyNotIn applies the NotIn predicate on the "invite_policy" field.
func InvitePolicyNotIn(vs ...int8) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldInvitePolicy, vs...))
}

// InvitePolicyGT applies the GT predicate on the "invite_policy" field.
func InvitePolicyGT(v int8) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldInvitePolicy, v))
}

// InvitePolicyGTE applies the GTE predicate on the "invite_policy" field.
func InvitePolicyGTE(v int8) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldInvitePolicy, v))
}

// InvitePolicyLT applies the LT predicate on the "invite_policy" field.
func InvitePolicyLT(v int8) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldInvitePolicy, v))
}

// InvitePolicyLTE applies the LTE predicate on the "invite_policy" field.
func InvitePolicyLTE(v int8) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldInvitePolicy, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Group {
	return predicate.Group(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Group {
	return predicate.Group(sql.FieldLTE(FieldCreatedAt, v))
}

// HasMembers applies the HasEdge predicate on the "members" edge.
func HasMembers() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, MembersTable, MembersPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasMembersWith applies the HasEdge predicate on the "members" edge with a given conditions (other predicates).
func HasMembersWith(preds ...predicate.User) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newMembersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSharedStudyLogs applies the HasEdge predicate on the "shared_study_logs" edge.
func HasSharedStudyLogs() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SharedStudyLogsTable, SharedStudyLogsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSharedStudyLogsWith applies the HasEdge predicate on the "shared_study_logs" edge with a given conditions (other predicates).
func HasSharedStudyLogsWith(preds ...predicate.StudyLog) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newSharedStudyLogsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSharedTimer applies the HasEdge predicate on the "shared_timer" edge.
func HasSharedTimer() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, SharedTimerTable, SharedTimerPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSharedTimerWith applies the HasEdge predicate on the "shared_timer" edge with a given conditions (other predicates).
func HasSharedTimerWith(preds ...predicate.Timer) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newSharedTimerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasInviteCodes applies the HasEdge predicate on the "invite_codes" edge.
func HasInviteCodes() predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InviteCodesTable, InviteCodesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInviteCodesWith applies the HasEdge predicate on the "invite_codes" edge with a given conditions (other predicates).
func HasInviteCodesWith(preds ...predicate.InviteCode) predicate.Group {
	return predicate.Group(func(s *sql.Selector) {
		step := newInviteCodesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Group) predicate.Group {
	return predicate.Group(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Group) predicate.Group {
	return predicate.Group(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Group) predicate.Group {
	return predicate.Group(sql.NotPredicates(p))
}

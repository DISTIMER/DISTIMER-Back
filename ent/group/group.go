// Code generated by ent, DO NOT EDIT.

package group

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the group type in the database.
	Label = "group"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldNicknamePolicy holds the string denoting the nickname_policy field in the database.
	FieldNicknamePolicy = "nickname_policy"
	// FieldRevealPolicy holds the string denoting the reveal_policy field in the database.
	FieldRevealPolicy = "reveal_policy"
	// FieldInvitePolicy holds the string denoting the invite_policy field in the database.
	FieldInvitePolicy = "invite_policy"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeSharedStudyLogs holds the string denoting the shared_study_logs edge name in mutations.
	EdgeSharedStudyLogs = "shared_study_logs"
	// EdgeSharedTimer holds the string denoting the shared_timer edge name in mutations.
	EdgeSharedTimer = "shared_timer"
	// EdgeInviteCodes holds the string denoting the invite_codes edge name in mutations.
	EdgeInviteCodes = "invite_codes"
	// Table holds the table name of the group in the database.
	Table = "groups"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "affiliations"
	// MembersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MembersInverseTable = "apns_tokens"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "groups"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "apns_tokens"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_owned_groups"
	// SharedStudyLogsTable is the table that holds the shared_study_logs relation/edge. The primary key declared below.
	SharedStudyLogsTable = "study_log_shared_group"
	// SharedStudyLogsInverseTable is the table name for the StudyLog entity.
	// It exists in this package in order to avoid circular dependency with the "studylog" package.
	SharedStudyLogsInverseTable = "study_logs"
	// SharedTimerTable is the table that holds the shared_timer relation/edge. The primary key declared below.
	SharedTimerTable = "timer_shared_group"
	// SharedTimerInverseTable is the table name for the Timer entity.
	// It exists in this package in order to avoid circular dependency with the "timer" package.
	SharedTimerInverseTable = "timers"
	// InviteCodesTable is the table that holds the invite_codes relation/edge.
	InviteCodesTable = "invite_codes"
	// InviteCodesInverseTable is the table name for the InviteCode entity.
	// It exists in this package in order to avoid circular dependency with the "invitecode" package.
	InviteCodesInverseTable = "invite_codes"
	// InviteCodesColumn is the table column denoting the invite_codes relation/edge.
	InviteCodesColumn = "group_invite_codes"
)

// Columns holds all SQL columns for group fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldNicknamePolicy,
	FieldRevealPolicy,
	FieldInvitePolicy,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "groups"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_owned_groups",
}

var (
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"user_id", "group_id"}
	// SharedStudyLogsPrimaryKey and SharedStudyLogsColumn2 are the table columns denoting the
	// primary key for the shared_study_logs relation (M2M).
	SharedStudyLogsPrimaryKey = []string{"study_log_id", "group_id"}
	// SharedTimerPrimaryKey and SharedTimerColumn2 are the table columns denoting the
	// primary key for the shared_timer relation (M2M).
	SharedTimerPrimaryKey = []string{"timer_id", "group_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultDescription holds the default value on creation for the "description" field.
	DefaultDescription string
	// DefaultNicknamePolicy holds the default value on creation for the "nickname_policy" field.
	DefaultNicknamePolicy string
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Group queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByNicknamePolicy orders the results by the nickname_policy field.
func ByNicknamePolicy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNicknamePolicy, opts...).ToFunc()
}

// ByRevealPolicy orders the results by the reveal_policy field.
func ByRevealPolicy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRevealPolicy, opts...).ToFunc()
}

// ByInvitePolicy orders the results by the invite_policy field.
func ByInvitePolicy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInvitePolicy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMembersCount orders the results by members count.
func ByMembersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMembersStep(), opts...)
	}
}

// ByMembers orders the results by members terms.
func ByMembers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMembersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// BySharedStudyLogsCount orders the results by shared_study_logs count.
func BySharedStudyLogsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSharedStudyLogsStep(), opts...)
	}
}

// BySharedStudyLogs orders the results by shared_study_logs terms.
func BySharedStudyLogs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSharedStudyLogsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySharedTimerCount orders the results by shared_timer count.
func BySharedTimerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSharedTimerStep(), opts...)
	}
}

// BySharedTimer orders the results by shared_timer terms.
func BySharedTimer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSharedTimerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInviteCodesCount orders the results by invite_codes count.
func ByInviteCodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInviteCodesStep(), opts...)
	}
}

// ByInviteCodes orders the results by invite_codes terms.
func ByInviteCodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInviteCodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMembersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MembersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, MembersTable, MembersPrimaryKey...),
	)
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newSharedStudyLogsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SharedStudyLogsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SharedStudyLogsTable, SharedStudyLogsPrimaryKey...),
	)
}
func newSharedTimerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SharedTimerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SharedTimerTable, SharedTimerPrimaryKey...),
	)
}
func newInviteCodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InviteCodesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, InviteCodesTable, InviteCodesColumn),
	)
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/affiliation"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/user"
)

// AffiliationCreate is the builder for creating a Affiliation entity.
type AffiliationCreate struct {
	config
	mutation *AffiliationMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ac *AffiliationCreate) SetUserID(u uuid.UUID) *AffiliationCreate {
	ac.mutation.SetUserID(u)
	return ac
}

// SetGroupID sets the "group_id" field.
func (ac *AffiliationCreate) SetGroupID(u uuid.UUID) *AffiliationCreate {
	ac.mutation.SetGroupID(u)
	return ac
}

// SetNickname sets the "nickname" field.
func (ac *AffiliationCreate) SetNickname(s string) *AffiliationCreate {
	ac.mutation.SetNickname(s)
	return ac
}

// SetRole sets the "role" field.
func (ac *AffiliationCreate) SetRole(i int8) *AffiliationCreate {
	ac.mutation.SetRole(i)
	return ac
}

// SetJoinedAt sets the "joined_at" field.
func (ac *AffiliationCreate) SetJoinedAt(t time.Time) *AffiliationCreate {
	ac.mutation.SetJoinedAt(t)
	return ac
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (ac *AffiliationCreate) SetNillableJoinedAt(t *time.Time) *AffiliationCreate {
	if t != nil {
		ac.SetJoinedAt(*t)
	}
	return ac
}

// SetUser sets the "user" edge to the User entity.
func (ac *AffiliationCreate) SetUser(u *User) *AffiliationCreate {
	return ac.SetUserID(u.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (ac *AffiliationCreate) SetGroup(g *Group) *AffiliationCreate {
	return ac.SetGroupID(g.ID)
}

// Mutation returns the AffiliationMutation object of the builder.
func (ac *AffiliationCreate) Mutation() *AffiliationMutation {
	return ac.mutation
}

// Save creates the Affiliation in the database.
func (ac *AffiliationCreate) Save(ctx context.Context) (*Affiliation, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AffiliationCreate) SaveX(ctx context.Context) *Affiliation {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AffiliationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AffiliationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AffiliationCreate) defaults() {
	if _, ok := ac.mutation.JoinedAt(); !ok {
		v := affiliation.DefaultJoinedAt()
		ac.mutation.SetJoinedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AffiliationCreate) check() error {
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Affiliation.user_id"`)}
	}
	if _, ok := ac.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "Affiliation.group_id"`)}
	}
	if _, ok := ac.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Affiliation.nickname"`)}
	}
	if _, ok := ac.mutation.Role(); !ok {
		return &ValidationError{Name: "role", err: errors.New(`ent: missing required field "Affiliation.role"`)}
	}
	if _, ok := ac.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "Affiliation.joined_at"`)}
	}
	if _, ok := ac.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Affiliation.user"`)}
	}
	if _, ok := ac.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "Affiliation.group"`)}
	}
	return nil
}

func (ac *AffiliationCreate) sqlSave(ctx context.Context) (*Affiliation, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ac *AffiliationCreate) createSpec() (*Affiliation, *sqlgraph.CreateSpec) {
	var (
		_node = &Affiliation{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(affiliation.Table, nil)
	)
	if value, ok := ac.mutation.Nickname(); ok {
		_spec.SetField(affiliation.FieldNickname, field.TypeString, value)
		_node.Nickname = value
	}
	if value, ok := ac.mutation.Role(); ok {
		_spec.SetField(affiliation.FieldRole, field.TypeInt8, value)
		_node.Role = value
	}
	if value, ok := ac.mutation.JoinedAt(); ok {
		_spec.SetField(affiliation.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if nodes := ac.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.UserTable,
			Columns: []string{affiliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.GroupTable,
			Columns: []string{affiliation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AffiliationCreateBulk is the builder for creating many Affiliation entities in bulk.
type AffiliationCreateBulk struct {
	config
	err      error
	builders []*AffiliationCreate
}

// Save creates the Affiliation entities in the database.
func (acb *AffiliationCreateBulk) Save(ctx context.Context) ([]*Affiliation, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Affiliation, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AffiliationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AffiliationCreateBulk) SaveX(ctx context.Context) []*Affiliation {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AffiliationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AffiliationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

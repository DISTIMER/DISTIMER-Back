// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/user"
)

// Group is the model entity for the Group schema.
type Group struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// NicknamePolicy holds the value of the "nickname_policy" field.
	NicknamePolicy string `json:"nickname_policy,omitempty"`
	// RevealPolicy holds the value of the "reveal_policy" field.
	RevealPolicy int8 `json:"reveal_policy,omitempty"`
	// InvitePolicy holds the value of the "invite_policy" field.
	InvitePolicy int8 `json:"invite_policy,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GroupQuery when eager-loading is set.
	Edges             GroupEdges `json:"edges"`
	user_owned_groups *uuid.UUID
	selectValues      sql.SelectValues
}

// GroupEdges holds the relations/edges for other nodes in the graph.
type GroupEdges struct {
	// Members holds the value of the members edge.
	Members []*User `json:"members,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// SharedStudyLogs holds the value of the shared_study_logs edge.
	SharedStudyLogs []*StudyLog `json:"shared_study_logs,omitempty"`
	// InviteCodes holds the value of the invite_codes edge.
	InviteCodes []*InviteCode `json:"invite_codes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// MembersOrErr returns the Members value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) MembersOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.Members, nil
	}
	return nil, &NotLoadedError{edge: "members"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GroupEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// SharedStudyLogsOrErr returns the SharedStudyLogs value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) SharedStudyLogsOrErr() ([]*StudyLog, error) {
	if e.loadedTypes[2] {
		return e.SharedStudyLogs, nil
	}
	return nil, &NotLoadedError{edge: "shared_study_logs"}
}

// InviteCodesOrErr returns the InviteCodes value or an error if the edge
// was not loaded in eager-loading.
func (e GroupEdges) InviteCodesOrErr() ([]*InviteCode, error) {
	if e.loadedTypes[3] {
		return e.InviteCodes, nil
	}
	return nil, &NotLoadedError{edge: "invite_codes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Group) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case group.FieldRevealPolicy, group.FieldInvitePolicy:
			values[i] = new(sql.NullInt64)
		case group.FieldName, group.FieldDescription, group.FieldNicknamePolicy:
			values[i] = new(sql.NullString)
		case group.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case group.FieldID:
			values[i] = new(uuid.UUID)
		case group.ForeignKeys[0]: // user_owned_groups
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Group fields.
func (gr *Group) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case group.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				gr.ID = *value
			}
		case group.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gr.Name = value.String
			}
		case group.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gr.Description = value.String
			}
		case group.FieldNicknamePolicy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname_policy", values[i])
			} else if value.Valid {
				gr.NicknamePolicy = value.String
			}
		case group.FieldRevealPolicy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field reveal_policy", values[i])
			} else if value.Valid {
				gr.RevealPolicy = int8(value.Int64)
			}
		case group.FieldInvitePolicy:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field invite_policy", values[i])
			} else if value.Valid {
				gr.InvitePolicy = int8(value.Int64)
			}
		case group.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gr.CreatedAt = value.Time
			}
		case group.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field user_owned_groups", values[i])
			} else if value.Valid {
				gr.user_owned_groups = new(uuid.UUID)
				*gr.user_owned_groups = *value.S.(*uuid.UUID)
			}
		default:
			gr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Group.
// This includes values selected through modifiers, order, etc.
func (gr *Group) Value(name string) (ent.Value, error) {
	return gr.selectValues.Get(name)
}

// QueryMembers queries the "members" edge of the Group entity.
func (gr *Group) QueryMembers() *UserQuery {
	return NewGroupClient(gr.config).QueryMembers(gr)
}

// QueryOwner queries the "owner" edge of the Group entity.
func (gr *Group) QueryOwner() *UserQuery {
	return NewGroupClient(gr.config).QueryOwner(gr)
}

// QuerySharedStudyLogs queries the "shared_study_logs" edge of the Group entity.
func (gr *Group) QuerySharedStudyLogs() *StudyLogQuery {
	return NewGroupClient(gr.config).QuerySharedStudyLogs(gr)
}

// QueryInviteCodes queries the "invite_codes" edge of the Group entity.
func (gr *Group) QueryInviteCodes() *InviteCodeQuery {
	return NewGroupClient(gr.config).QueryInviteCodes(gr)
}

// Update returns a builder for updating this Group.
// Note that you need to call Group.Unwrap() before calling this method if this Group
// was returned from a transaction, and the transaction was committed or rolled back.
func (gr *Group) Update() *GroupUpdateOne {
	return NewGroupClient(gr.config).UpdateOne(gr)
}

// Unwrap unwraps the Group entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gr *Group) Unwrap() *Group {
	_tx, ok := gr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Group is not a transactional entity")
	}
	gr.config.driver = _tx.drv
	return gr
}

// String implements the fmt.Stringer.
func (gr *Group) String() string {
	var builder strings.Builder
	builder.WriteString("Group(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gr.ID))
	builder.WriteString("name=")
	builder.WriteString(gr.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(gr.Description)
	builder.WriteString(", ")
	builder.WriteString("nickname_policy=")
	builder.WriteString(gr.NicknamePolicy)
	builder.WriteString(", ")
	builder.WriteString("reveal_policy=")
	builder.WriteString(fmt.Sprintf("%v", gr.RevealPolicy))
	builder.WriteString(", ")
	builder.WriteString("invite_policy=")
	builder.WriteString(fmt.Sprintf("%v", gr.InvitePolicy))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(gr.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Groups is a parsable slice of Group.
type Groups []*Group

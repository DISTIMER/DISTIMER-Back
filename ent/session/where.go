// Code generated by ent, DO NOT EDIT.

package session

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldID, id))
}

// RefreshToken applies equality check predicate on the "refresh_token" field. It's identical to RefreshTokenEQ.
func RefreshToken(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRefreshToken, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// DeviceType applies equality check predicate on the "device_type" field. It's identical to DeviceTypeEQ.
func DeviceType(v int8) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldDeviceType, v))
}

// LastActive applies equality check predicate on the "last_active" field. It's identical to LastActiveEQ.
func LastActive(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldLastActive, v))
}

// RefreshTokenEQ applies the EQ predicate on the "refresh_token" field.
func RefreshTokenEQ(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldRefreshToken, v))
}

// RefreshTokenNEQ applies the NEQ predicate on the "refresh_token" field.
func RefreshTokenNEQ(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldRefreshToken, v))
}

// RefreshTokenIn applies the In predicate on the "refresh_token" field.
func RefreshTokenIn(vs ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldRefreshToken, vs...))
}

// RefreshTokenNotIn applies the NotIn predicate on the "refresh_token" field.
func RefreshTokenNotIn(vs ...uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldRefreshToken, vs...))
}

// RefreshTokenGT applies the GT predicate on the "refresh_token" field.
func RefreshTokenGT(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldRefreshToken, v))
}

// RefreshTokenGTE applies the GTE predicate on the "refresh_token" field.
func RefreshTokenGTE(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldRefreshToken, v))
}

// RefreshTokenLT applies the LT predicate on the "refresh_token" field.
func RefreshTokenLT(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldRefreshToken, v))
}

// RefreshTokenLTE applies the LTE predicate on the "refresh_token" field.
func RefreshTokenLTE(v uuid.UUID) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldRefreshToken, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldCreatedAt, v))
}

// DeviceTypeEQ applies the EQ predicate on the "device_type" field.
func DeviceTypeEQ(v int8) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldDeviceType, v))
}

// DeviceTypeNEQ applies the NEQ predicate on the "device_type" field.
func DeviceTypeNEQ(v int8) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldDeviceType, v))
}

// DeviceTypeIn applies the In predicate on the "device_type" field.
func DeviceTypeIn(vs ...int8) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldDeviceType, vs...))
}

// DeviceTypeNotIn applies the NotIn predicate on the "device_type" field.
func DeviceTypeNotIn(vs ...int8) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldDeviceType, vs...))
}

// DeviceTypeGT applies the GT predicate on the "device_type" field.
func DeviceTypeGT(v int8) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldDeviceType, v))
}

// DeviceTypeGTE applies the GTE predicate on the "device_type" field.
func DeviceTypeGTE(v int8) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldDeviceType, v))
}

// DeviceTypeLT applies the LT predicate on the "device_type" field.
func DeviceTypeLT(v int8) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldDeviceType, v))
}

// DeviceTypeLTE applies the LTE predicate on the "device_type" field.
func DeviceTypeLTE(v int8) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldDeviceType, v))
}

// LastActiveEQ applies the EQ predicate on the "last_active" field.
func LastActiveEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldEQ(FieldLastActive, v))
}

// LastActiveNEQ applies the NEQ predicate on the "last_active" field.
func LastActiveNEQ(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldNEQ(FieldLastActive, v))
}

// LastActiveIn applies the In predicate on the "last_active" field.
func LastActiveIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldIn(FieldLastActive, vs...))
}

// LastActiveNotIn applies the NotIn predicate on the "last_active" field.
func LastActiveNotIn(vs ...time.Time) predicate.Session {
	return predicate.Session(sql.FieldNotIn(FieldLastActive, vs...))
}

// LastActiveGT applies the GT predicate on the "last_active" field.
func LastActiveGT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGT(FieldLastActive, v))
}

// LastActiveGTE applies the GTE predicate on the "last_active" field.
func LastActiveGTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldGTE(FieldLastActive, v))
}

// LastActiveLT applies the LT predicate on the "last_active" field.
func LastActiveLT(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLT(FieldLastActive, v))
}

// LastActiveLTE applies the LTE predicate on the "last_active" field.
func LastActiveLTE(v time.Time) predicate.Session {
	return predicate.Session(sql.FieldLTE(FieldLastActive, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasApnsToken applies the HasEdge predicate on the "apns_token" edge.
func HasApnsToken() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, ApnsTokenTable, ApnsTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasApnsTokenWith applies the HasEdge predicate on the "apns_token" edge with a given conditions (other predicates).
func HasApnsTokenWith(preds ...predicate.APNsToken) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newApnsTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFcmToken applies the HasEdge predicate on the "fcm_token" edge.
func HasFcmToken() predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, FcmTokenTable, FcmTokenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFcmTokenWith applies the HasEdge predicate on the "fcm_token" edge with a given conditions (other predicates).
func HasFcmTokenWith(preds ...predicate.FCMToken) predicate.Session {
	return predicate.Session(func(s *sql.Selector) {
		step := newFcmTokenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Session) predicate.Session {
	return predicate.Session(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Session) predicate.Session {
	return predicate.Session(sql.NotPredicates(p))
}

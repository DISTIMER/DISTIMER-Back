// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/affiliation"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/user"
)

// Affiliation is the model entity for the Affiliation schema.
type Affiliation struct {
	config `json:"-"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// GroupID holds the value of the "group_id" field.
	GroupID uuid.UUID `json:"group_id,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Role holds the value of the "role" field.
	Role int8 `json:"role,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AffiliationQuery when eager-loading is set.
	Edges        AffiliationEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AffiliationEdges holds the relations/edges for other nodes in the graph.
type AffiliationEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Group holds the value of the group edge.
	Group *Group `json:"group,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AffiliationEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GroupOrErr returns the Group value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AffiliationEdges) GroupOrErr() (*Group, error) {
	if e.Group != nil {
		return e.Group, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: group.Label}
	}
	return nil, &NotLoadedError{edge: "group"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Affiliation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case affiliation.FieldRole:
			values[i] = new(sql.NullInt64)
		case affiliation.FieldNickname:
			values[i] = new(sql.NullString)
		case affiliation.FieldJoinedAt:
			values[i] = new(sql.NullTime)
		case affiliation.FieldUserID, affiliation.FieldGroupID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Affiliation fields.
func (a *Affiliation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case affiliation.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				a.UserID = *value
			}
		case affiliation.FieldGroupID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field group_id", values[i])
			} else if value != nil {
				a.GroupID = *value
			}
		case affiliation.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case affiliation.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				a.Role = int8(value.Int64)
			}
		case affiliation.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				a.JoinedAt = value.Time
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Affiliation.
// This includes values selected through modifiers, order, etc.
func (a *Affiliation) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Affiliation entity.
func (a *Affiliation) QueryUser() *UserQuery {
	return NewAffiliationClient(a.config).QueryUser(a)
}

// QueryGroup queries the "group" edge of the Affiliation entity.
func (a *Affiliation) QueryGroup() *GroupQuery {
	return NewAffiliationClient(a.config).QueryGroup(a)
}

// Update returns a builder for updating this Affiliation.
// Note that you need to call Affiliation.Unwrap() before calling this method if this Affiliation
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Affiliation) Update() *AffiliationUpdateOne {
	return NewAffiliationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Affiliation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Affiliation) Unwrap() *Affiliation {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Affiliation is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Affiliation) String() string {
	var builder strings.Builder
	builder.WriteString("Affiliation(")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", a.UserID))
	builder.WriteString(", ")
	builder.WriteString("group_id=")
	builder.WriteString(fmt.Sprintf("%v", a.GroupID))
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", a.Role))
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(a.JoinedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Affiliations is a parsable slice of Affiliation.
type Affiliations []*Affiliation

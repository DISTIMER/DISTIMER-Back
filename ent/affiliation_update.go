// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"pentag.kr/distimer/ent/affiliation"
	"pentag.kr/distimer/ent/group"
	"pentag.kr/distimer/ent/predicate"
	"pentag.kr/distimer/ent/user"
)

// AffiliationUpdate is the builder for updating Affiliation entities.
type AffiliationUpdate struct {
	config
	hooks    []Hook
	mutation *AffiliationMutation
}

// Where appends a list predicates to the AffiliationUpdate builder.
func (au *AffiliationUpdate) Where(ps ...predicate.Affiliation) *AffiliationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUserID sets the "user_id" field.
func (au *AffiliationUpdate) SetUserID(u uuid.UUID) *AffiliationUpdate {
	au.mutation.SetUserID(u)
	return au
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (au *AffiliationUpdate) SetNillableUserID(u *uuid.UUID) *AffiliationUpdate {
	if u != nil {
		au.SetUserID(*u)
	}
	return au
}

// SetGroupID sets the "group_id" field.
func (au *AffiliationUpdate) SetGroupID(u uuid.UUID) *AffiliationUpdate {
	au.mutation.SetGroupID(u)
	return au
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (au *AffiliationUpdate) SetNillableGroupID(u *uuid.UUID) *AffiliationUpdate {
	if u != nil {
		au.SetGroupID(*u)
	}
	return au
}

// SetNickname sets the "nickname" field.
func (au *AffiliationUpdate) SetNickname(s string) *AffiliationUpdate {
	au.mutation.SetNickname(s)
	return au
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (au *AffiliationUpdate) SetNillableNickname(s *string) *AffiliationUpdate {
	if s != nil {
		au.SetNickname(*s)
	}
	return au
}

// SetRole sets the "role" field.
func (au *AffiliationUpdate) SetRole(i int8) *AffiliationUpdate {
	au.mutation.ResetRole()
	au.mutation.SetRole(i)
	return au
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (au *AffiliationUpdate) SetNillableRole(i *int8) *AffiliationUpdate {
	if i != nil {
		au.SetRole(*i)
	}
	return au
}

// AddRole adds i to the "role" field.
func (au *AffiliationUpdate) AddRole(i int8) *AffiliationUpdate {
	au.mutation.AddRole(i)
	return au
}

// SetUser sets the "user" edge to the User entity.
func (au *AffiliationUpdate) SetUser(u *User) *AffiliationUpdate {
	return au.SetUserID(u.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (au *AffiliationUpdate) SetGroup(g *Group) *AffiliationUpdate {
	return au.SetGroupID(g.ID)
}

// Mutation returns the AffiliationMutation object of the builder.
func (au *AffiliationUpdate) Mutation() *AffiliationMutation {
	return au.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (au *AffiliationUpdate) ClearUser() *AffiliationUpdate {
	au.mutation.ClearUser()
	return au
}

// ClearGroup clears the "group" edge to the Group entity.
func (au *AffiliationUpdate) ClearGroup() *AffiliationUpdate {
	au.mutation.ClearGroup()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AffiliationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AffiliationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AffiliationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AffiliationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AffiliationUpdate) check() error {
	if _, ok := au.mutation.UserID(); au.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Affiliation.user"`)
	}
	if _, ok := au.mutation.GroupID(); au.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Affiliation.group"`)
	}
	return nil
}

func (au *AffiliationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(affiliation.Table, affiliation.Columns, sqlgraph.NewFieldSpec(affiliation.FieldUserID, field.TypeUUID), sqlgraph.NewFieldSpec(affiliation.FieldGroupID, field.TypeUUID))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Nickname(); ok {
		_spec.SetField(affiliation.FieldNickname, field.TypeString, value)
	}
	if value, ok := au.mutation.Role(); ok {
		_spec.SetField(affiliation.FieldRole, field.TypeInt8, value)
	}
	if value, ok := au.mutation.AddedRole(); ok {
		_spec.AddField(affiliation.FieldRole, field.TypeInt8, value)
	}
	if au.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.UserTable,
			Columns: []string{affiliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.UserTable,
			Columns: []string{affiliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.GroupTable,
			Columns: []string{affiliation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.GroupTable,
			Columns: []string{affiliation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{affiliation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AffiliationUpdateOne is the builder for updating a single Affiliation entity.
type AffiliationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AffiliationMutation
}

// SetUserID sets the "user_id" field.
func (auo *AffiliationUpdateOne) SetUserID(u uuid.UUID) *AffiliationUpdateOne {
	auo.mutation.SetUserID(u)
	return auo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (auo *AffiliationUpdateOne) SetNillableUserID(u *uuid.UUID) *AffiliationUpdateOne {
	if u != nil {
		auo.SetUserID(*u)
	}
	return auo
}

// SetGroupID sets the "group_id" field.
func (auo *AffiliationUpdateOne) SetGroupID(u uuid.UUID) *AffiliationUpdateOne {
	auo.mutation.SetGroupID(u)
	return auo
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (auo *AffiliationUpdateOne) SetNillableGroupID(u *uuid.UUID) *AffiliationUpdateOne {
	if u != nil {
		auo.SetGroupID(*u)
	}
	return auo
}

// SetNickname sets the "nickname" field.
func (auo *AffiliationUpdateOne) SetNickname(s string) *AffiliationUpdateOne {
	auo.mutation.SetNickname(s)
	return auo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (auo *AffiliationUpdateOne) SetNillableNickname(s *string) *AffiliationUpdateOne {
	if s != nil {
		auo.SetNickname(*s)
	}
	return auo
}

// SetRole sets the "role" field.
func (auo *AffiliationUpdateOne) SetRole(i int8) *AffiliationUpdateOne {
	auo.mutation.ResetRole()
	auo.mutation.SetRole(i)
	return auo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (auo *AffiliationUpdateOne) SetNillableRole(i *int8) *AffiliationUpdateOne {
	if i != nil {
		auo.SetRole(*i)
	}
	return auo
}

// AddRole adds i to the "role" field.
func (auo *AffiliationUpdateOne) AddRole(i int8) *AffiliationUpdateOne {
	auo.mutation.AddRole(i)
	return auo
}

// SetUser sets the "user" edge to the User entity.
func (auo *AffiliationUpdateOne) SetUser(u *User) *AffiliationUpdateOne {
	return auo.SetUserID(u.ID)
}

// SetGroup sets the "group" edge to the Group entity.
func (auo *AffiliationUpdateOne) SetGroup(g *Group) *AffiliationUpdateOne {
	return auo.SetGroupID(g.ID)
}

// Mutation returns the AffiliationMutation object of the builder.
func (auo *AffiliationUpdateOne) Mutation() *AffiliationMutation {
	return auo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (auo *AffiliationUpdateOne) ClearUser() *AffiliationUpdateOne {
	auo.mutation.ClearUser()
	return auo
}

// ClearGroup clears the "group" edge to the Group entity.
func (auo *AffiliationUpdateOne) ClearGroup() *AffiliationUpdateOne {
	auo.mutation.ClearGroup()
	return auo
}

// Where appends a list predicates to the AffiliationUpdate builder.
func (auo *AffiliationUpdateOne) Where(ps ...predicate.Affiliation) *AffiliationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AffiliationUpdateOne) Select(field string, fields ...string) *AffiliationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Affiliation entity.
func (auo *AffiliationUpdateOne) Save(ctx context.Context) (*Affiliation, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AffiliationUpdateOne) SaveX(ctx context.Context) *Affiliation {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AffiliationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AffiliationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AffiliationUpdateOne) check() error {
	if _, ok := auo.mutation.UserID(); auo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Affiliation.user"`)
	}
	if _, ok := auo.mutation.GroupID(); auo.mutation.GroupCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Affiliation.group"`)
	}
	return nil
}

func (auo *AffiliationUpdateOne) sqlSave(ctx context.Context) (_node *Affiliation, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(affiliation.Table, affiliation.Columns, sqlgraph.NewFieldSpec(affiliation.FieldUserID, field.TypeUUID), sqlgraph.NewFieldSpec(affiliation.FieldGroupID, field.TypeUUID))
	if id, ok := auo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "Affiliation.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := auo.mutation.GroupID(); !ok {
		return nil, &ValidationError{Name: "group_id", err: errors.New(`ent: missing "Affiliation.group_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !affiliation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Nickname(); ok {
		_spec.SetField(affiliation.FieldNickname, field.TypeString, value)
	}
	if value, ok := auo.mutation.Role(); ok {
		_spec.SetField(affiliation.FieldRole, field.TypeInt8, value)
	}
	if value, ok := auo.mutation.AddedRole(); ok {
		_spec.AddField(affiliation.FieldRole, field.TypeInt8, value)
	}
	if auo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.UserTable,
			Columns: []string{affiliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.UserTable,
			Columns: []string{affiliation.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.GroupCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.GroupTable,
			Columns: []string{affiliation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   affiliation.GroupTable,
			Columns: []string{affiliation.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Affiliation{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{affiliation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
